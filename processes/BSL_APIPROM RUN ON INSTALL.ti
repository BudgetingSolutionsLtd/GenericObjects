#region Prolog
# Process to create and update cubes required for the API promotion tool

#############################################################################################################################
# CHANGE LOG
# 24/02/2025 | Helen Heaton | Process created
#############################################################################################################################

#Region PROCESS LOGGING
pPrologNow = Now; 
# Catch errors with if statement and do nErrors = nErrors+1;
nErrors = 0;   
# Redefine message depending on if statement that handled the exception to help user
pMessage = 'Process completed successfully';    
sMessage1 = '';
sMessage2 = '';
sMessage3 = '';
# Concatenate the parameters together to write into output cube. pParam1 | ', ' | pParam2 | ', ' | pParam3 | ....
pParameters ='pHost: ' | pHost | ', pAPIKey: ' | pAPIKey | ', pDevTenant: ' | pDevTenant | ', pProdTenant: ' | pProdTenant; 
#EndRegion

# Create credentials cube
ExecuteProcess( 'BSL_APIPROM Update Credentials Cube',
	'pHost', pHost,
	'pAPIKey', pAPIKey,
	'pDevTenant', pDevTenant,
	'pProdTenant', pProdTenant );

# Create Dimensions cube
ExecuteProcess( 'BSL_APIPROM Update Dimensions Cube' );



#endregion
#region Epilog


#Region PROCESS LOGGING
# Put messages here to explain exceptions to user
if(nErrors>0);
    pMessage = sMessage1 |sMessage2 | sMessage3 ;   
endif;
ExecuteProcess('SYS Process Logging', 'pProcessName',GetProcessName(), 'pUser', tm1user, 'pPrologNow', pPrologNow, 'pErrors', nErrors, 'pMessage', pMessage, 'pParameters', pParameters);
####### pMessage and nErrors must be defined in the process to log with exeption handling.
#EndRegion
#endregion