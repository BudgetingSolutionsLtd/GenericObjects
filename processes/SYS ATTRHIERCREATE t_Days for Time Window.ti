#region Prolog
# Generic process to create a time window hierarchy and/or subset using index attribute

#Region PROCESS LOGGING
## PUT IN PROLOG OF PROCESS TO LOG ##
pPrologNow = Now;
# Catch errors with if statement and do nErrors = nErrors+1;
nErrors = 0;
# Redefine messages depending on exception handling
pMessage = 'Process completed successfully. ';
sMessage1 = ''; sMessage2 = ''; sMessage3 = ''; sMessage4 = ''; sMessage5 = '';
# Concatenate the parameters together to write into output cube. 'pParam1: ' | pParam1 |',  'pParam2: ' | pParam2 | ', | 'pParam3: ' |  pParam3 | ....
pParameters = 'pHierName: ' | pHierName | ', ' | 'pWindowStart: ' | numbertostring(pWindowStart) | ', ' | 'pWindowEnd: ' | numbertostring(pWindowEnd) | ', ' | 'pCreateSubset: ' | pCreateSubset | ', ' | 'pCreateHierarchy: ' | pCreateHierarchy;
pReturnString = '';
pReturnNumber = 0;
#EndRegion PROCESS LOGGING


HierName = pHierName;
DimName = 't_Days';



# useful subset to have so not temporary
SubName = HierName;
# need to get 1st day of current period for mdx to work
nToday = CellGetN( 'Model Parameters', 'Input', 'Current Day (Serial)');


# mdx to get window
mdx = '{FILTER({TM1FILTERBYLEVEL(TM1SUBSETALL([t_Days].[t_Days]) , 0)}, (IIF([t_Days].[t_Days].CURRENTMEMBER.PROPERTIES("Serial")="", 0.0, STRTOVALUE([t_Days].[t_Days].CURRENTMEMBER.PROPERTIES("Serial"))) <= '| numbertostring(nToday+pWindowEnd) |') AND (IIF([t_Days].[t_Days].CURRENTMEMBER.PROPERTIES("Serial")="", 0.0, STRTOVALUE([t_Days].[t_Days].CURRENTMEMBER.PROPERTIES("Serial"))) >=  '| numbertostring(nToday+pWindowStart) |'))}';


# need subset for both hierarchy creation and subset creation so destroy it in epilog
if(SubsetExists( DimName, SubName)=0);
    SubsetCreatebyMDX(SubName, mdx , 0 );
else;
    SubsetMDXSet( DimName, SubName, mdx );
endif;

nmax = SubsetGetSize( DimName, SubName );
n=1;
AttrName = 'Financial Period';

if(pCreateHierarchy@='Yes');
    # create hierarchy of the subset
    if(HierarchyExists( DimName, HierName )=1);
        HierarchyDeleteAllElements( DimName, HierName );
    endif;
    HierarchyElementInsertDirect( DimName, HierName, '', HierName | ' Total' , 'c' ); 

    while(n<=nmax);
        ElName = SubsetGetElementName( DimName, SubName, n );
        AttrValue = ATTRS( DimName, ElName, AttrName );
        if(attrValue@='');
            sMessage1 = sMessage1 | elName | ' attribute "' | HierName | '" is blank, ';
            nErrors = nErrors + 1;
        else;
            # add attribute as consol if it doesnt exist
            if(HierarchyElementExists( DimName, HierName, attrValue )=0);
                HierarchyElementInsertDirect( DimName, HierName, '', attrValue, 'c' );
                HierarchyElementComponentAddDirect( DimName, HierName,  HierName | ' Total' , attrValue, 1 );
            endif;
            HierarchyElementInsertDirect( DimName, HierName, '', elName , 'n' ); 
            HierarchyElementComponentAddDirect( DimName, HierName, attrValue, elName, 1 );
        endif;
        n = n+1;
    end;
endif;
#endregion
#region Epilog
if(pCreateSubset@='No');
    SubsetDestroy( DimName, SubName );
endif;

#
#
#
#Region PROCESS LOGGING
## PUT IN EPILOG OF PROCESS TO LOG ##
# Put messages here to explain exceptions to user;
if(nErrors>0);
    pMessage = sMessage1 | ', ' | sMessage2 | ', ' | sMessage3 | ', ' | sMessage4 | ', ' | sMessage5;
endif;
# pMessage and nErrors must be defined in the process to log with exception handling.
RunProcess('SYS Process Logging', 'pProcessName',GetProcessName(), 'pUser', tm1user, 'pPrologNow', pPrologNow, 'pErrors', nErrors, 'pMessage', pMessage, 'pParameters', pParameters, 'pReturnString', pReturnString, 'pReturnNumber', pReturnNumber);
#EndRegion PROCESS LOGGING



#endregion