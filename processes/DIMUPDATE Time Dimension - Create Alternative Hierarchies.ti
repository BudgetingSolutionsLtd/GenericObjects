#region Prolog

sDimPrd = 'Period';
sDimYear = 'Year';
nTmp = 1;
sSrcSubset = GetProcessName | '_SrcSubset';
sLoopSubset = GetProcessName | '_LoopSubset';
sCleanSubset = GetProcessName | '_CleanSubset'; 

IF( HierarchyExists( sDimPrd, 'Financial Year' )=0); HierarchyCreate( sDimPrd, 'Financial Year' ); EndIF;
IF( HierarchyExists( sDimPrd, 'Financial Month' )=0); HierarchyCreate( sDimPrd, 'Financial Month' ); EndIF;
IF( HierarchyExists( sDimPrd, 'Calendar Year' )=0); HierarchyCreate( sDimPrd, 'Calendar Year' ); EndIF;
IF( HierarchyExists( sDimPrd, 'Calendar Month' )=0); HierarchyCreate( sDimPrd, 'Calendar Month' ); EndIF;
IF( HierarchyExists( sDimPrd, 'Rollups' )=0); HierarchyCreate( sDimPrd, 'Rollups' ); EndIF;
IF( HierarchyExists( sDimPrd, 'Balances' )=0); HierarchyCreate( sDimPrd, 'Balances' ); EndIF;

nMetaDataRecord = 0;


SubsetCreate( sDimPrd, sSrcSubset, nTmp );
sMDX = '{Except(TM1FilterByLevel(TM1DrillDownMember({[Period].[All Financial Years]}, All, Recursive), 0),{[Period].[Opening Balance]})}';
SubsetMDXSet( sDimPrd, sSrcSubset, sMDX );
SubsetMDXSet( sDimPrd, sSrcSubset, '' );

SubsetCreate( sDimPrd, sLoopSubset, nTmp);

DatasourceNameForServer = sDimPrd;
DatasourceDimensionSubset = sSrcSubset;

SubsetCreate( sDimPrd, sCleanSubset, nTmp );


#endregion
#region Metadata

nMetaDataRecord = nMetaDataRecord + 1;
IF( nMetaDataRecord = 1);
  HierarchyDeleteAllElements( sDimPrd, 'Financial Year' );
  HierarchyDeleteAllElements( sDimPrd, 'Financial Month' );
  HierarchyDeleteAllElements( sDimPrd, 'Calendar Year' );
  HierarchyDeleteAllElements( sDimPrd, 'Calendar Month' );
  HierarchyDeleteAllElements( sDimPrd, 'Rollups' );  
  HierarchyDeleteAllElements( sDimPrd, 'Balances' );

  sMDX = '{[Period].[YTD Rollups],[Period].[YTD Rollups].Children}';
  IF(DIMIX('Period', 'Balances Rollups')>0);
    SubsetMDXSet( sDimPrd, sCleanSubset, sMDX );
    DimensionDeleteElements( sDimPrd, sCleanSubset );
  EndIF;

  sMDX = '{[Period].[YTD Rollups],[Period].[3 Month Rolling Rollups].Children}';
  IF(DIMIX('Period', 'Balances Rollups')>0);
    SubsetMDXSet( sDimPrd, sCleanSubset, sMDX );
    DimensionDeleteElements( sDimPrd, sCleanSubset );
  EndIF;

  sMDX = '{[Period].[YTD Rollups],[Period].[6 Month Rolling Rollups].Children}';
  IF(DIMIX('Period', 'Balances Rollups')>0);
    SubsetMDXSet( sDimPrd, sCleanSubset, sMDX );
    DimensionDeleteElements( sDimPrd, sCleanSubset );
  EndIF;

  sMDX = '{[Period].[YTD Rollups],[Period].[12 Month Rolling Rollups].Children}';
  IF(DIMIX('Period', 'Balances Rollups')>0);
    SubsetMDXSet( sDimPrd, sCleanSubset, sMDX );
    DimensionDeleteElements( sDimPrd, sCleanSubset );
  EndIF;

  sMDX = '{[Period].[Balances Rollups],[Period].[Balances Rollups].Children}';
  IF(DIMIX('Period', 'Balances Rollups')>0);
    SubsetMDXSet( sDimPrd, sCleanSubset, sMDX );
    DimensionDeleteElements( sDimPrd, sCleanSubset );
  EndIF;

  
  HierarchyElementInsert( sDimPrd, 'Financial Year', '', 'All Financial Years', 'C' );
  HierarchyElementInsert( sDimPrd, 'Financial Month', '', 'All Financial Months', 'C' );
  HierarchyElementInsert( sDimPrd, 'Calendar Year', '', 'All Calendar Years', 'C' ); 
  HierarchyElementInsert( sDimPrd, 'Calendar Month', '', 'All Calendar Months', 'C' );  
  HierarchyElementInsert( sDimPrd, 'Rollups', '', 'All YTD Rollups', 'C' );  
  HierarchyElementInsert( sDimPrd, 'Rollups', '', 'All 3 Month Rolling Rollups', 'C' );
  HierarchyElementInsert( sDimPrd, 'Rollups', '', 'All 6 Month Rolling Rollups', 'C' );
  HierarchyElementInsert( sDimPrd, 'Rollups', '', 'All 12 Month Rolling Rollups', 'C' );
  HierarchyElementInsert( sDimPrd, 'Balances', '', 'All Balances', 'C' );  
  
  DimensionElementInsert( sDimPrd, '', 'YTD Rollups', 'C' );
  DimensionElementInsert( sDimPrd, '', '3 Month Rolling Rollups', 'C' );
  DimensionElementInsert( sDimPrd, '', '6 Month Rolling Rollups', 'C' );
  DimensionElementInsert( sDimPrd, '', '12 Month Rolling Rollups', 'C' );
  DimensionElementInsert( sDimPrd, '', 'Balances Rollups', 'C' );  
EndIF;

  sFinancialMonth = CellGetS('}ElementAttributes_Period', vPeriod, 'Financial Month' );
  sFinancialYear = CellGetS('}ElementAttributes_Period', vPeriod, 'Financial Year' );
  sCalendarMonth = CellGetS('}ElementAttributes_Period', vPeriod, 'Month (mmm)' );
  sCalendarYear = CellGetS('}ElementAttributes_Period', vPeriod, 'Calendar Year (yyyy)' );
  sQtr = Subst(CellGetS('}ElementAttributes_Period', vPeriod, 'Financial Quarter' ),1,2);
  
  HierarchyElementInsert( sDimPrd, 'Financial Year', '', vPeriod, 'N' );
  HierarchyElementInsert( sDimPrd, 'Financial Month', '', vPeriod, 'N' );
  HierarchyElementInsert( sDimPrd, 'Calendar Year', '', vPeriod, 'N' );
  HierarchyElementInsert( sDimPrd, 'Calendar Month', '', vPeriod, 'N' ); 
  
  HierarchyElementInsert( sDimPrd, 'Financial Year', '', sFinancialYear, 'C');
  HierarchyElementComponentAdd( sDimPrd, 'Financial Year', 'All Financial Years', sFinancialYear, 1 );
  HierarchyElementComponentAdd( sDimPrd, 'Financial Year', sFinancialYear, vPeriod, 1 );

  HierarchyElementInsert( sDimPrd, 'Financial Month', '', sFinancialMonth, 'C');
  HierarchyElementInsert( sDimPrd, 'Financial Month', '', sQtr, 'C');
  HierarchyElementComponentAdd( sDimPrd, 'Financial Month', 'All Financial Months', sQtr, 1 );
  HierarchyElementComponentAdd( sDimPrd, 'Financial Month', sQtr, sFinancialMonth, 1 );
  HierarchyElementComponentAdd( sDimPrd, 'Financial Month', sFinancialMonth, vPeriod, 1 );

  HierarchyElementInsert( sDimPrd, 'Calendar Year', '', sCalendarYear, 'C');
  HierarchyElementComponentAdd( sDimPrd, 'Calendar Year', 'All Calendar Years', sCalendarYear, 1 );
  HierarchyElementComponentAdd( sDimPrd, 'Calendar Year', sCalendarYear, vPeriod, 1 );

  HierarchyElementInsert( sDimPrd, 'Calendar Month', '', sCalendarMonth, 'C');
  HierarchyElementComponentAdd( sDimPrd, 'Calendar Month', 'All Calendar Months', sCalendarMonth, 1 );
  HierarchyElementComponentAdd( sDimPrd, 'Calendar Month', sCalendarMonth, vPeriod, 1 );

  sMonthYTD = vPeriod | ' YTD';
  s3MonthRolling = vPeriod | ' 3 Month Rolling';
  s6MonthRolling = vPeriod | ' 6 Month Rolling';
  s12MonthRolling = vPeriod | ' 12 Month Rolling'; 
  sMonthBalance = vPeriod | ' Balance';
  
  HierarchyElementInsert( sDimPrd, 'Rollups', '',sMonthYTD, 'C' );
  HierarchyElementComponentAdd( sDimPrd, 'Rollups', 'All YTD Rollups', sMonthYTD, 1 ); 
  
  DimensionElementInsert( sDimPrd, '', sMonthYTD, 'C' );
  DimensionElementComponentAdd( sDimPrd, 'YTD Rollups', sMonthYTD, 0 );
  
  HierarchyElementInsert( sDimPrd, 'Rollups', '',s3MonthRolling, 'C' );
  HierarchyElementComponentAdd( sDimPrd, 'Rollups', 'All 3 Month Rolling Rollups', s3MonthRolling, 1 );

  DimensionElementInsert( sDimPrd, '', s3MonthRolling, 'C' );
  DimensionElementComponentAdd( sDimPrd, '3 Month Rolling Rollups', s3MonthRolling, 0 );

  HierarchyElementInsert( sDimPrd, 'Rollups', '',s6MonthRolling, 'C' );
  HierarchyElementComponentAdd( sDimPrd, 'Rollups', 'All 6 Month Rolling Rollups', s6MonthRolling, 1 );

  DimensionElementInsert( sDimPrd, '', s6MonthRolling, 'C' );
  DimensionElementComponentAdd( sDimPrd, '6 Month Rolling Rollups', s6MonthRolling, 0 );

  HierarchyElementInsert( sDimPrd, 'Rollups', '',s12MonthRolling, 'C' );
  HierarchyElementComponentAdd( sDimPrd, 'Rollups', 'All 12 Month Rolling Rollups', s12MonthRolling, 1 );

  DimensionElementInsert( sDimPrd, '', s12MonthRolling, 'C' );
  DimensionElementComponentAdd( sDimPrd, '12 Month Rolling Rollups', s12MonthRolling, 0 );

  HierarchyElementInsert( sDimPrd, 'Balances', '', sMonthBalance, 'C' );
  HierarchyElementComponentAdd( sDimPrd, 'Balances', 'All Balances', sMonthBalance, 1 );

  DimensionElementInsert( sDimPrd, '', sMonthBalance, 'C' );
  DimensionElementComponentAdd( sDimPrd, 'Balances Rollups', sMonthBalance, 0 );


# Build Rollups (YTD / 3 Month Rolling / 6 Month Rolling / 12 Month Rolling )

  sPeriodInsert = vPeriod;
  
  iRollingCount = 1;

  nPeriodIndex = CellGetN('}ElementAttributes_Period', vPeriod, 'Period Index');
  sPeriodIndex = NumberToString( nPeriodIndex );

  IF( nPeriodIndex > 12);
    nCapIndex = nPeriodIndex - 12;
  Else;
    nCapIndex = 0;
  EndIF;
  sCapIndex = NumberToString(nCapIndex);
  
  sMDX = Expand('ORDER(FILTER(FILTER(TM1FILTERBYLEVEL(TM1SUBSETALL([Period]) , 0) , [}ElementAttributes_Period].([}ElementAttributes_Period].[Period Index]) <= %sPeriodIndex%) , [}ElementAttributes_Period].([}ElementAttributes_Period].[Period Index]) > %sCapIndex%) , [}ElementAttributes_Period].([}ElementAttributes_Period].[Period Index]) , ASC)');

  SubsetDeleteAllElements(sDimPrd, sLoopSubset);
  SubsetMDXSet(sDimPrd, sLoopSubset, sMDX);
  SubsetMDXSet(sDimPrd, sLoopSubset, '');
  
  iLoop = SubsetGetSize( 'Period', sLoopSubset );
  iLoopSize = iLoop;

  While( iLoop > 0);

    sPeriodInsert = SubsetGetElementName( sDimPrd, sLoopSubset, iLoop);
    sPeriodInsertFY = CellGetS('}ElementAttributes_Period', sPeriodInsert, 'Financial Year');

    # YTD Consolidation
    #---------------------------------

    IF( sPeriodInsertFY @= sFinancialYear);
        HierarchyElementComponentAdd( sDimPrd, 'Rollups', sMonthYtd, sPeriodInsert, 1);        
        DimensionElementComponentAdd( sDimPrd, sMonthYTD, sPeriodInsert, 1 );
    EndIF;

    # 3 Month Rolling
    #---------------------------------

    IF( iLoop > (iLoopSize - 3) & nPeriodIndex >= 3);
        HierarchyElementComponentAdd( sDimPrd, 'Rollups', s3MonthRolling, sPeriodInsert, 1);
        DimensionElementComponentAdd( sDimPrd, s3MonthRolling, sPeriodInsert, 1);        
    EndIF;

    # 6 Month Rolling
    #---------------------------------

    IF( iLoop > (iLoopSize - 6) & nPeriodIndex >= 6);
        HierarchyElementComponentAdd( sDimPrd, 'Rollups', s6MonthRolling, sPeriodInsert, 1);
        DimensionElementComponentAdd( sDimPrd, s6MonthRolling, sPeriodInsert, 1);        
    EndIF;

    # 12 Month Rolling
    #---------------------------------

    IF( iLoop > (iLoopSize - 12) & nPeriodIndex >= 12);
        HierarchyElementComponentAdd( sDimPrd, 'Rollups', s12MonthRolling, sPeriodInsert, 1);
        DimensionElementComponentAdd( sDimPrd, s12MonthRolling, sPeriodInsert, 1);                
    EndIF;

    # Identify Prior Month for next loop
    #---------------------------------

    sPeriodInsert = CellGetS('}ElementAttributes_Period', sPeriodInsert, 'Previous Period');

  iLoop = iLoop - 1;
  End;

  # Balances

    sMDX = Expand('ORDER(FILTER(TM1FILTERBYLEVEL(TM1SUBSETALL([Period]) , 0) , [}ElementAttributes_Period].([}ElementAttributes_Period].[Period Index]) <= %sPeriodIndex%) , [}ElementAttributes_Period].([}ElementAttributes_Period].[Period Index]) , ASC)');
    SubsetDeleteAllElements( sDimPrd, sLoopSubset );
    SubsetMDXSet( sDimPrd, sLoopSubset, sMDX );
    SubsetMDXSet( sDimPrd, sLoopSubset, '');

    iLoopMax = SubsetGetSize( sDimPrd, sLoopSubset);
    iLoop = iLoopMax;

    While( iLoop > 0 );
      sPeriodInsert = SubsetGetElementName( sDimPrd, sLoopSubset, iLoop );
      HierarchyElementComponentAdd( sDimPrd, 'Balances', sMonthBalance, sPeriodInsert, 1 );
      DimensionElementComponentAdd( sDimPrd, sMonthBalance, sPeriodInsert, 1);                      
      iLoop = iLoop - 1;
    End;

      HierarchyElementComponentAdd( sDimPrd, 'Balances', sMonthBalance, 'Opening Balance', 1 );
      DimensionElementComponentAdd( sDimPrd, sMonthBalance, 'Opening Balance', 1);                      


#endregion
#region Data


#endregion
#region Epilog

SubsetDestroy(sDimPrd, sSrcSubset);
SubsetDestroy(sDimPrd, sLoopSubset);
#endregion