#region Prolog
#Region PROCESS LOGGING
pPrologNow = Now; 
# Catch errors with if statement and do nErrors = nErrors+1;
nErrors = 0;   
# Redefine message depending on if statement that handled the exception to help user
pMessage = 'Process completed successfully.';    
sMessage1 = '';
sMessage2 = '';
sMessage3 = '';
# Concatenate the parameters together to write into output cube. pParam1 | ', ' | pParam2 | ', ' | pParam3 | ....
pParameters ='pCubeName: ' | pCubeName | ', pSourceInstance: ' | pSourceInstance | ', pSourceDB: ' | pSourceDB | ', pFind: ' | ', ' | pFind | ', pReplace: ' | pReplace;
pReturnString = '';
pReturnNumber = 0;
#EndRegion PROCESS LOGGING

# Check pCubeName for spaces and replace with %20
i=1;
while (i>0);
    i = SCAN(' ',pCubeName);
    if(i<>0);
        pCubeName = DELET(pCubeName,i,1);
        pCubeName = INSRT('%20',pCubeName,i);
    endif;
end;

#-------------------------------------------------------------------------------------------------------------------------------------------------------------
# Define environment variables
#-------------------------------------------------------------------------------------------------------------------------------------------------------------
# Global settings for the client
host = CellGetS( 'SYS PA API Credentials', 'Input', 'host' );
apiKey =  CellGetS( 'SYS PA API Credentials', 'Input', 'apiKey' );

# Convert apiKey to base 64 encoding
apiKey = Base64Encode( 'apikey:'| apiKey);

# Tenant ID's for the instances that exist
DevTenant =CellGetS( 'SYS PA API Credentials', 'Input', 'DevTenant' );
ProdTenant = CellGetS( 'SYS PA API Credentials', 'Input', 'ProdTenant' );

# Select which tenant to use for the source
If(pSourceInstance @= 'Dev');
    SourceTenant = DevTenant;
elseif( pSourceInstance @= 'Prod' );
    SourceTenant = ProdTenant;
endif;

DestinationTenant = SourceTenant;
# Set databases to copy from and to
SourceDB = pSourceDB;
DestinationDB = pSourceDB;
pDestDB = pSourceDB;

# Define the root URL for the source and destination for the API calls
SourceRoot = host |'/api/' |SourceTenant | '/v0/tm1/' |SourceDB|'/api/v1/'; 
DestinationRoot = SourceRoot;


#-------------------------------------------------------------------------------------------------------------------------------------------------------------
# GET DATA FROM SOURCE DATABASE
#-------------------------------------------------------------------------------------------------------------------------------------------------------------
# Request a session cookie that means further requests don't need authentication token
SourceHeader = '-H Authorization: Basic ' | apiKey;
ExecuteHttpRequest('GET', host | '/api/' | SourceTenant | '/v0/rolemgmt/v1/users/me', SourceHeader);

# Check the response and end the process if authentication failed
ResponseBody = HttpResponseGetBody();
ResponseStatus = HttpResponseGetStatusCode();
If(ResponseStatus <> 200);
    ItemReject('Error authenticating to source environment: ' | ResponseBody);
EndIf;

# Get Process data from source database
url = SourceRoot |'Cubes('''|pCubeName|''')/Rules';
ExecuteHttpRequest('GET', url, SourceHeader);

# Check the response and end the process if authentication failed
ResponseRule = HttpResponseGetBody();
ResponseStatus = HttpResponseGetStatusCode();
If(ResponseStatus > 299);
    ItemReject('Error retrieving process '|pCubeName|' in  '|pSourceDB|'  Error code: '|NumberToString( ResponseStatus)|' Response: ' | ResponseBody);
EndIf;


#Region #~~~~~~~~~~Actual find and replace part ~~~~~~~~~~~#
#find and replace in prolog
rule = JsonGet( ResponseRule, 'value' );
FindLong = LONG( pFind );
FindScan = SCAN( pFind, rule);
while(FindScan<>0);
    rule = SUBST( rule, 1, FindScan-1) | pReplace | SUBST( rule, FindScan+FindLong, long(rule));
    FindScan = SCAN( pFind, rule );
end;
ResponseRule = JsonReplace( ResponseRule, 'value', rule );


#-------------------------------------------------------------------------------------------------------------------------------------------------------------
# UPDATE THE DESTINATION DATABASE
#-------------------------------------------------------------------------------------------------------------------------------------------------------------
# Request a session cookie that means further requests don't need authentication token 
# This isn't needed if the source and target databases are on the same instance, but when copy from one instance to another it is, so just do it anyway.
DestinationAuthHeader = '-H Authorization: Basic ' | apiKey;
ExecuteHttpRequest('GET', host | '/api/' | DestinationTenant | '/v0/rolemgmt/v1/users/me', DestinationAuthHeader);

# Check the response and end the process if authentication failed
ResponseBody = HttpResponseGetBody();
ResponseStatus = HttpResponseGetStatusCode();
If(ResponseStatus <> 200);
    ItemReject('Error authenticating to destination environment: ' | ResponseBody);
EndIf;

# Define header
DestinationHeader = '-H Content-Type: application/json; charset=utf-8';

# Define endpoint
pDestinationName = pCubeName;
url = DestinationRoot |'Cubes('''|pDestinationName|''')';

# Prepare data
DestinationData = JsonAdd( '{}', 'Rules', rule );

url = DestinationRoot |'Cubes('''|pDestinationName|''')';
ExecuteHttpRequest('GET', url, DestinationAuthHeader);
ResponseStatus = HttpResponseGetStatusCode();
ResponseBody = HttpResponseGetBody();

DestinationData = JsonRemove( DestinationData, 'Attributes' );

url = DestinationRoot |'Cubes('''|pDestinationName|''')';
ExecuteHttpRequest('PATCH', url, DestinationAuthHeader, DestinationHeader,  '-d ' | DestinationData );

ResponseBody = HttpResponseGetBody();
ResponseStatus = HttpResponseGetStatusCode();
If(ResponseStatus <> 200);
    ItemReject('Error updating process '|pDestinationName|' in  '|pDestDB|'  Error code: '|NumberToString( ResponseStatus)|' Response: ' | ResponseBody);
EndIf;
#endregion
#region Epilog

#Region PROCESS LOGGING
# Put messages here to explain exceptions to user;
if(nErrors>0);
    pMessage = sMessage1 | sMessage2 | sMessage3;
endif;
# pMessage and nErrors must be defined in the process to log with exeption handling.
RunProcess('}func_Process Logging', 'pProcessName',GetProcessName(), 'pUser', tm1user, 'pPrologNow', pPrologNow, 'pErrors', nErrors, 'pMessage', pMessage, 'pParameters', pParameters, 'pReturnString', pReturnString, 'pReturnNumber', pReturnNumber);
#EndRegion PROCESS LOGGING
#endregion