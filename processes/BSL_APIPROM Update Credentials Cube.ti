#region Prolog
# This cube is used to determine which attribute dimensions to export when promoting to another environment

#############################################################################################################################
# CHANGE LOG
# 07/02/2025 | Helen Heaton | Process created
#############################################################################################################################


#Region PROCESS LOGGING
pPrologNow = Now; 
# Catch errors with if statement and do nErrors = nErrors+1;
nErrors = 0;   
# Redefine message depending on if statement that handled the exception to help user
pMessage = 'Process completed successfully';    
sMessage1 = '';
sMessage2 = '';
sMessage3 = '';
# Concatenate the parameters together to write into output cube. pParam1 | ', ' | pParam2 | ', ' | pParam3 | ....
pParameters ='pHost: ' | pHost | ', pAPIKey: ' | pAPIKey | ', pDevTenant: ' | pDevTenant | ', pProdTenant: ' | pProdTenant; 
#EndRegion


#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Define Process Parameters
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Define variables
DimName = 'BSL_APIPROM Input';
MeasureDimName = 'BSL_APIPROM Credentials';
CubeName = 'BSL_APIPROM Credentials';


#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Create Dimensions if they don't already exist
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Input Dimension
IF(DimensionExists( DimName ) = 0);
    DimensionCreate( DimName );
    DimensionElementInsert( DimName, '', 'Input', 'n' );
Endif;

# Measures Dimensions
IF(DimensionExists( MeasureDimName ) = 0);
    DimensionCreate( MeasureDimName );
    DimensionElementInsert( MeasureDimName, '', 'host', 's' );
    DimensionElementInsert( MeasureDimName, '', 'apiKey', 's' );
    DimensionElementInsert( MeasureDimName, '', 'DevTenant', 's' );
    DimensionElementInsert( MeasureDimName, '', 'ProdTenant', 's' );
Endif;



#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Create Cube if it doesn't already exist
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF(CubeExists( CubeName ) = 0);
    CubeCreate( CubeName, DimName, MeasureDimName );
Endif;

#endregion
#region Data
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Update the cube with the values provided in the parameters
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CellPutS( pHost, CubeName ,'Input','host');
CellPutS( pAPIKey, CubeName ,'Input','apiKey');
CellPutS( pDevTenant, CubeName ,'Input','DevTenant');
CellPutS( pProdTenant, CubeName ,'Input','ProdTenant');


#endregion
#region Epilog

#Region PROCESS LOGGING
# Put messages here to explain exceptions to user
if(nErrors>0);
    pMessage = sMessage1 |sMessage2 | sMessage3 ;   
endif;
ExecuteProcess('SYS Process Logging', 'pProcessName',GetProcessName(), 'pUser', tm1user, 'pPrologNow', pPrologNow, 'pErrors', nErrors, 'pMessage', pMessage, 'pParameters', pParameters);
####### pMessage and nErrors must be defined in the process to log with exeption handling.
#EndRegion
#endregion