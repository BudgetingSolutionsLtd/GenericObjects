#region Prolog
#Region PROCESS LOGGING
pPrologNow = Now; 
# Catch errors with if statement and do nErrors = nErrors+1;
nErrors = 0;   
# Redefine message depending on if statement that handled the exception to help user
pMessage = 'Process completed successfully.';    
sMessage1 = '';
sMessage2 = '';
sMessage3 = '';
# Concatenate the parameters together to write into output cube. pParam1 | ', ' | pParam2 | ', ' | pParam3 | ....
pParameters = 'pCubeName: ' | pCubeName;
pReturnString = '';
pReturnNumber = 0;
#EndRegion PROCESS LOGGING

nDimCount = CubeDimensionCountGet(pCubeName);
nDim = 1;

while(nDim<=nDimCount);

    dimName = TABDIM( pCubeName, nDim );

    if(nDim = 1);
        dim1 = dimName;
    elseif(nDim = 2);
        dim2 = dimName;
    elseif(nDim = 3);
        dim3 = dimName;
    elseif(nDim = 4);
        dim4 = dimName;
    elseif(nDim = 5);
        dim5 = dimName;
    elseif(nDim = 6);
        dim6 = dimName;
    elseif(nDim = 7);
        dim7 = dimName;
    elseif(nDim = 8);
        dim8 = dimName;
    endif;
    nDim = nDim+1;
end;


sPicklistCubeName = '}Picklist_' | pCubeName;

if(CubeExists(sPicklistCubeName)=0);

    if(nDimCount=1);
        # error
    elseif(nDimCount = 2);
        CubeCreate(sPicklistCubeName, dim1, dim2, '}Picklist');
    elseif(nDimCount = 3);
        CubeCreate(sPicklistCubeName, dim1, dim2, dim3, '}Picklist');
    elseif(nDimCount = 4);
        CubeCreate(sPicklistCubeName, dim1, dim2, dim3, dim4, '}Picklist');
    elseif(nDimCount = 5);
        CubeCreate(sPicklistCubeName, dim1, dim2, dim3, dim4, dim5, '}Picklist');
    elseif(nDimCount = 6);
        CubeCreate(sPicklistCubeName, dim1, dim2, dim3, dim4, dim5, dim6, '}Picklist');
    elseif(nDimCount = 7);
        CubeCreate(sPicklistCubeName, dim1, dim2, dim3, dim4, dim5, dim6, dim7, '}Picklist');
    elseif(nDimCount = 8);
        CubeCreate(sPicklistCubeName, dim1, dim2, dim3, dim4, dim5, dim6, dim7, dim8, '}Picklist');
    endif;
endif;
#endregion
#region Epilog


#Region PROCESS LOGGING
# Put messages here to explain exceptions to user;
if(nErrors>0);
    pMessage = sMessage1 | sMessage2 | sMessage3;
endif;
# pMessage and nErrors must be defined in the process to log with exeption handling.
RunProcess('}func_Process Logging', 'pProcessName',GetProcessName(), 'pUser', tm1user, 'pPrologNow', pPrologNow, 'pErrors', nErrors, 'pMessage', pMessage, 'pParameters', pParameters, 'pReturnString', pReturnString, 'pReturnNumber', pReturnNumber);
#EndRegion PROCESS LOGGING
#endregion