#region Prolog
#-------------------------------------------------------------------------------------------------------------------------------------------------------------
# Define environment variables
#-------------------------------------------------------------------------------------------------------------------------------------------------------------
# Global settings for the client
host = CellGetS( 'SYS PA API Credentials', 'Input', 'host' );
apiKey =  CellGetS( 'SYS PA API Credentials', 'Input', 'apiKey' );

# Convert apiKey to base 64 encoding
apiKey = Base64Encode( 'apikey:'| apiKey);

# Tenant ID's for the instances that exist
DevTenant =CellGetS( 'SYS PA API Credentials', 'Input', 'DevTenant' );
ProdTenant = CellGetS( 'SYS PA API Credentials', 'Input', 'ProdTenant' );

# Select which tenant to use for the source
If(pSourceInstance @= 'Dev');
    SourceTenant = DevTenant;
elseif( pSourceInstance @= 'Prod' );
    SourceTenant = ProdTenant;
endif;

# Select which tenant to use for the destination
If(pDestInstance @= 'Dev');
    DestinationTenant = DevTenant;
elseif( pDestInstance @= 'Prod' );
    DestinationTenant = ProdTenant;
endif;

# Set databases to copy from and to
SourceDB = pSourceDB;
DestinationDB = pDestDB;

# Define the root URL for the source and destination for the API calls
SourceRoot = host |'/api/' |SourceTenant | '/v0/tm1/' |SourceDB|'/api/v1/'; 
DestinationRoot = host | '/api/' | DestinationTenant | '/v0/tm1/' | DestinationDB | '/api/v1/';


#-------------------------------------------------------------------------------------------------------------------------------------------------------------
# GET DATA FROM SOURCE DATABASE
#-------------------------------------------------------------------------------------------------------------------------------------------------------------
# Request a session cookie that means further requests don't need authentication token
SourceHeader = '-h Authorization: Basic ' | apiKey;
ExecuteHttpRequest('GET', host | '/api/' | SourceTenant | '/v0/rolemgmt/v1/users/me', SourceHeader);

# Check the response and end the process if authentication failed
ResponseBody = HttpResponseGetBody();
ResponseStatus = HttpResponseGetStatusCode();
If(ResponseStatus <> 200);
    ItemReject('Error authenticating to source environment: ' | ResponseBody);
EndIf;

# Get Process data from source database
url = SourceRoot |'Processes('''|pSourceName|''')';
ExecuteHttpRequest('GET', url, Sourceheader);
SourceData = HttpResponseGetBody();

# Check the response and end the process if authentication failed
ResponseBody = HttpResponseGetBody();
ResponseStatus = HttpResponseGetStatusCode();
If(ResponseStatus > 299);
       ItemReject('Error receiving process '|pSourceName|' in  '|pSourceDB|'  Error code: '|NumberToString( ResponseStatus)|' Response: ' | ResponseBody);
EndIf;


#-------------------------------------------------------------------------------------------------------------------------------------------------------------
# UPDATE THE DESTINATION DATABASE
#-------------------------------------------------------------------------------------------------------------------------------------------------------------
# Request a session cookie that means further requests don't need authentication token 
# This isn't needed if the source and target databases are on the same instance, but when copy from one instance to another it is, so just do it anyway.
DestinationAuthHeader = '-h Authorization: Basic ' | apiKey;
ExecuteHttpRequest('GET', host | '/api/' | DestinationTenant | '/v0/rolemgmt/v1/users/me', DestinationAuthHeader);

# Check the response and end the process if authentication failed
ResponseBody = HttpResponseGetBody();
ResponseStatus = HttpResponseGetStatusCode();
If(ResponseStatus <> 200);
    ItemReject('Error authenticating to destination environment: ' | ResponseBody);
EndIf;

# Define header
DestinationHeader = '-H Content-Type: application/json; charset=utf-8';

# Define endpoint
pDestinationName = pSourceName;
url = DestinationRoot |'Processes('''|pDestinationName|''')';

# Prepare data
DestinationData = SourceData;

# Check if process already exists on target
url = DestinationRoot |'Processes('''|pDestinationName|''')';
ExecuteHttpRequest('GET', url, DestinationHeader);
ResponseStatus = HttpResponseGetStatusCode();
If(ResponseStatus = 200);
    Exists = 1;
    elseif( ResponseStatus <>200 );
    Exists = 0;
endif;

# If the process Doesn't already exist, create it
If (Exists = 0);
    url = DestinationRoot |'Processes';
    ExecuteHttpRequest('POST', url, DestinationHeader,  '-d ' | DestinationData );
    
    ResponseBody = HttpResponseGetBody();
    ResponseStatus = HttpResponseGetStatusCode();
    If(ResponseStatus <> 201);
           ItemReject('Error updating process '|pDestinationName|' in  '|pDestDB|'  Error code: '|NumberToString( ResponseStatus)|' Response: ' | ResponseBody);
    EndIf;
Endif;

# If the process already exists, update it (can't update attributes via PATCH)
If (Exists = 1);
    DestinationData = JsonRemove( DestinationData, 'Attributes' );
    
    url = DestinationRoot |'Processes('''|pDestinationName|''')';
    ExecuteHttpRequest('PATCH', url, DestinationHeader,  '-d ' | DestinationData );
    
    ResponseBody = HttpResponseGetBody();
    ResponseStatus = HttpResponseGetStatusCode();
    If(ResponseStatus <> 200);
           ItemReject('Error updating process '|pDestinationName|' in  '|pDestDB|'  Error code: '|NumberToString( ResponseStatus)|' Response: ' | ResponseBody);
    EndIf;
Endif;


test =1;



#endregion
#region Data


#endregion
#region Epilog



#endregion