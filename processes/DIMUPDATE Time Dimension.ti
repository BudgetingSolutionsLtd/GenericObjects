#region Prolog

sDimPrd = 'Period';
sDimYear = 'Year';
nTmp = 1;
sSrcSubset = GetProcessName | '_SrcSubset';
sUnwindSubset = GetProcessName | '_UnwindSubset';

# DimensionDestroy( sDimPrd );
# DimensionDestroy( sDimYear );

IF( DimensionExists( sDimPrd )= 0);
  DimensionCreate(sDimPrd);
  AttrInsert(sDimPrd, '', 'Period Index', 'n');
  AttrInsert(sDimPrd, '', 'Next Period', 's');
  AttrInsert(sDimPrd, '', 'Previous Period', 's');
  AttrInsert(sDimPrd, '', 'Calendar Year (yyyy)', 's');
  AttrInsert(sDimPrd, '', 'Calendar Year (yy)', 's');
  AttrInsert(sDimPrd, '', 'Month (mmmm)', 's');
  AttrInsert(sDimPrd, '', 'Month (mmm)', 's');
  AttrInsert(sDimPrd, '', 'Month (mm)', 's');
  AttrInsert(sDimPrd, '', 'Month (m)', 's');
  AttrInsert(sDimPrd, '', 'Financial Year', 's');
  AttrInsert(sDimPrd, '', 'Financial Quarter', 's');
  AttrInsert(sDimPrd, '', 'Financial Month', 's');
  AttrInsert(sDimPrd, '', 'Calendar Month', 'a');
  AttrInsert(sDimPrd, '', 'Financial Half', 's');
  AttrInsert(sDimPrd, '', 'ERP_Key', 'a');
  DimensionElementInsert( sDimPrd, '', 'All Financial Years', 'C' );
EndIF;    

IF( DimensionExists( sDimYear )= 0);
  DimensionCreate(sDimYear);
  AttrInsert( sDimYear, '', 'FY', 'S' );
  AttrInsert( sDimYear, '', 'Last Year', 'S');
  AttrInsert( sDimYear, '', 'Last FY', 'S');
  AttrInsert( sDimYear, '', 'Next Year', 'S');
  AttrInsert( sDimYear, '', 'Next FY', 'S');  
  DimensionElementInsertDirect( sDimYear, '', 'All Financial Years', 'C' );    
  DimensionElementInsertDirect( sDimYear, '', '2016', 'N' );  
  DimensionElementComponentAddDirect( sDimYear, 'All Financial Years', '2016', 1 );  
EndIF;

IF(DIMIX(sDimYear, 'All Financial Years')=0);
  DimensionElementInsertDirect( sDimYear, '', 'All Financial Years', 'C' );  
  IF(DIMIX(sDimYear, '2016')=0);
    DimensionElementInsertDirect( sDimYear, '', '2016', 'N' );  
  EndIF;
  DimensionElementComponentAddDirect( sDimYear, 'All Financial Years', '2016', 1 );
  
  sFY = 'FY2016';
  CellPutS( sFY, '}ElementAttributes_Year', '2016', 'FY' );  
  CellPutS( sFY, '}ElementAttributes_Year', 'FY2015', 'Last FY' );   
  CellPutS( sFY, '}ElementAttributes_Year', '2015', 'Last Year' );    
EndIF;

sTopConsol = 'All Financial Years';

IF( pAddYear @= 'Y');
  iChild = ELCOMPN( sDimYear, 'All Financial Years' );
  sLastYear = ELCOMP( sDimYear, 'All Financial Years', iChild);
  sLastFY = CellGetS('}ElementAttributes_Year', sLastYear, 'FY');
  
  IF( sLastYear @= ''); sLastYear = '2016'; EndIF;
  nLastYear = StringToNumber( sLastYear );
  
  nNewYear = nLastYear + 1;
  sNewYear = NumberToString(nNewYear);
  nNextYear = nNewYear + 1;
  sNextYear = NumberToString(nNextYear);
  sNextFY = 'FY' | sNewYear;
  
  DimensionElementInsertDirect( sDimYear, '', sNewYear, 'N' );
  DimensionElementComponentAddDirect( sDimYear, sTopConsol, sNewYear, 1 );
  
  sFY = 'FY' | sNewYear;
  CellPutS( sFY, '}ElementAttributes_Year', sNewYear, 'FY' );  
  CellPutS( sLastYear, '}ElementAttributes_Year', sNewYear, 'Last FY' );   
  CellPutS( sLastFY, '}ElementAttributes_Year', sNewYear, 'Last Year' );      
  CellPutS( sNextFY, '}ElementAttributes_Year', sNewYear, 'Next FY' );      
  CellPutS( sNextYear, '}ElementAttributes_Year', sNewYear, 'Next Year' );        
  CellPutS( 'P12 ' | sFY, '}ElementAttributes_Year', sNewYear, 'Last Period in Year' );            
EndIF;

sMDX = '[Year].[All Financial Years].Children';
SubsetCreatebyMDX( sSrcSubset, sMDX, nTmp );

DatasourceNameForServer = sDimYear;
DatasourceDimensionSubset = sSrcSubset;

sMDX = Expand('EXCEPT(TM1FilterByLevel(TM1DrillDownMember({[Period].[%sTopConsol%]},All,Recursive), 0) , TM1FILTERBYLEVEL(TM1SUBSETALL([Period]) , 0))');
SubsetCreate( sDimPrd, sUnwindSubset, nTmp );
SubsetMDXSet( sDimPrd, sUnwindSubset, sMDX );
SubsetMDXSet( sDimPrd, sUnwindSubset, '' );

nRecord = 0;

#endregion
#region Metadata

nRecord = nRecord + 1;

IF( nRecord = 1);
  DimensionDeleteElements( sDimPrd, sUnwindSubset );
  DimensionElementInsert( sDimPrd, '', sTopConsol, 'C' );
EndIF;

IF( vYear @= '2016' % vYear @= '2017' % vYear @= '2018' % vYear @= '2019'); ItemSkip; EndIF;

sPrevYear = CellGetS('}ElementAttributes_Year', vYear, 'Last Year');
sFY = CellGetS('}ElementAttributes_Year', vYear, 'FY');

DimensionElementInsert( sDimPrd, '', sFY, 'C' );

iPrd = 1;
iPrdMax = ELCOMPN( 'Month', 'All Months' );

While( iPrd <= iPrdMax);

  sFinancialMonth = ELCOMP( 'Month', 'All Months', iPrd );  
  sPrd = sFinancialMonth | ' ' | sFY;
  
  sFinancialQTR = CellGetS( '}ElementAttributes_Month', sFinancialMonth, 'Quarter' ) | ' ' | sFY;
  sFinancialHalf = CellGetS( '}ElementAttributes_Month', sFinancialMonth, 'Half' ) | ' ' | sFY;

  DimensionElementInsert( sDimPrd, '', sPrd, 'N' );
  DimensionElementInsert( sDimPrd, '', sFinancialQtr, 'C' );
  DimensionElementInsert( sDimPrd, '', sFinancialHalf, 'C' );
  DimensionElementInsert( sDimPrd, '', sFY, 'C' );
  DimensionElementInsert( sDimPrd, '', 'All Financial Years', 'C');
  DimensionElementInsert( sDimPrd, '', 'Opening Balance', 'N');
  
  DimensionElementComponentAdd( sDimPrd, 'All Financial Years', sFY, 1 );
  DimensionElementComponentAdd( sDimPrd, sFY, sFinancialHalf, 1 );
  DimensionElementComponentAdd( sDimPrd, sFinancialHalf, sFinancialQtr, 1 );
  DimensionElementComponentAdd( sDimPrd, sFinancialQtr, sPrd, 1 );  
#  DimensionElementComponentAdd( sDimPrd, 'All Financial Years', 'Opening Balance', 1);
  
  iPrd = iPrd + 1;
End;

#endregion
#region Data

IF( vYear @= '2016' % vYear @= '2017' % vYear @= '2018' % vYear @= '2019'); ItemSkip; EndIF;

sPrevYear = CellGetS('}ElementAttributes_Year', vYear, 'Last Year');
sFY = CellGetS('}ElementAttributes_Year', vYear, 'FY');
sPrevFY = CellGetS('}ElementAttributes_Year', vYear, 'Last FY');

iPrd = 1;
iPrdMax = ELCOMPN( 'Month', 'All Months' );

While( iPrd <= iPrdMax);
  sFinancialMonth = ELCOMP( 'Month', 'All Months', iPrd );  
  sPrd = sFinancialMonth | ' ' | sFY;
    
  sFinancialQTR = CellGetS( '}ElementAttributes_Month', sFinancialMonth, 'Quarter' ) | ' ' | sFY;
  sFinancialHalf = CellGetS( '}ElementAttributes_Month', sFinancialMonth, 'Half' ) | ' ' | sFY;

  sPrevFYMonth = sFinancialMonth | ' ' | sPrevFY;
  sPrevFYQtr = CellGetS( '}ElementAttributes_Month', sFinancialMonth, 'Quarter' ) | ' ' | sPrevFY;
  sPrevFYHalf = CellGetS( '}ElementAttributes_Month', sFinancialMonth, 'Half' ) | ' ' | sPrevFY;
    
  sERPKey = vYear | '_' | CellGetS( '}ElementAttributes_Month', sFinancialMonth, 'ERP_Key');
    
  sMonthm = CellGetS( '}ElementAttributes_Month', sFinancialMonth, 'Month (m)' );
  sMonthmm = CellGetS( '}ElementAttributes_Month', sFinancialMonth, 'Month (mm)' );
  sMonthmmm = CellGetS( '}ElementAttributes_Month', sFinancialMonth, 'Month (mmm)' );  
  sMonthmmmm = CellGetS( '}ElementAttributes_Month', sFinancialMonth, 'Month (mmmm)' );

  IF( sFinancialMonth @= 'P01' % sFinancialMonth @= 'P02');
    sCalYearYY = SUBST( sPrevYear, 3, 2 ); 
    sCalYearYYYY = sPrevYear;
  Else;
    sCalYearYY = SUBST( vYear, 3, 2);
    sCalYearYYYY = vYear;
  EndIF;  
   
  CellPutS(sMonthm, '}ElementAttributes_Period', sPrd, 'Month (m)');
  CellPutS(sMonthmm, '}ElementAttributes_Period', sPrd, 'Month (mm)');
  CellPutS(sMonthmmm, '}ElementAttributes_Period', sPrd, 'Month (mmm)');
  CellPutS(sMonthmmmm, '}ElementAttributes_Period', sPrd, 'Month (mmmm)');
  
  CellPutS(sCalYearYY, '}ElementAttributes_Period', sPrd, 'Calendar Year (yy)');
  CellPutS(sCalYearYY, '}ElementAttributes_Period', sPrd, 'Calendar Year (yyyy)');
  
  CellPutS(sFinancialMonth, '}ElementAttributes_Period', sPrd, 'Financial Month');    
  CellPutS(sFinancialQTR, '}ElementAttributes_Period', sPrd, 'Financial Quarter');    
  CellPutS(sFinancialHalf, '}ElementAttributes_Period', sPrd, 'Financial Half');
  CellPutS(sFY, '}ElementAttributes_Period', sPrd, 'Financial Year'); 
  
  CellPutS(sMonthmmm | '-' | sCalYearYY, '}ElementAttributes_Period', sPrd, 'Calendar Month'); 
  CellPutS(sERPKey, '}ElementAttributes_Period', sPrd, 'ERP_Key');

  CellPutS(sFinancialQTR, '}ElementAttributes_Period', sFinancialQTR, 'Financial Quarter' );
  CellPutS(sFinancialHalf, '}ElementAttributes_Period', sFinancialQTR, 'Financial Half' );
  CellPutS(sFY, '}ElementAttributes_Period', sFinancialQTR, 'Financial Year' );

  CellPutS(sFinancialHalf, '}ElementAttributes_Period', sFinancialHalf, 'Financial Half' );
  CellPutS(sFY, '}ElementAttributes_Period', sFinancialHalf, 'Financial Year' );

  CellPutS(sFY, '}ElementAttributes_Period', sFY, 'Financial Year' );    

  CellPutS(sPrevFYMonth, '}ElementAttributes_Period', sPrd, 'Prior Year' );    
  CellPutS(sPrevFYQTR, '}ElementAttributes_Period', sFinancialQTR, 'Prior Year' );    
  CellPutS(sPrevFYHalf, '}ElementAttributes_Period', sFinancialHalf, 'Prior Year' );    
  CellPutS(sPrevFY, '}ElementAttributes_Period', sFY, 'Prior Year' );    
    
  iPrd = iPrd + 1;
End;

#endregion
#region Epilog

# Rebuild Rollups / Index / Alternate Hierarchies
  ExecuteProcess( 'DIMUPDATE Time Dimension - Create Index');
  ExecuteProcess( 'DIMUPDATE Time Dimension - Create Alternative Hierarchies');
  ExecuteProcess( 'DIMUPDATE Time Dimension - Create Monthly Rollups');
#endregion