#region Prolog
# This process creates and updates the 'BSL_APIPROM Attribute Dimensions' cube
# This cube is used to determine which attribute dimensions to export when promoting to another environment

#############################################################################################################################
# CHANGE LOG
# 24/02/2025 | Helen Heaton | Process created
#############################################################################################################################

#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Define Process Parameters
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Define variables
DimName = 'BSL_APIPROM Attribute Dimensions';
MeasureDimName = 'BSL_APIPROM Attribute Dimension Measures';
CubeName = 'BSL_APIPROM Attribute Dimensions';


#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Create Dimensions if they don't already exist
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Attribute Dimensions
IF(DimensionExists( DimName ) = 0);
    DimensionCreate( DimName );
Endif;

# Measures Dimension
IF(DimensionExists( MeasureDimName ) = 0);
    DimensionCreate( MeasureDimName );
    DimensionElementInsert( MeasureDimName, '', 'AttributeDimName', 's' );
    DimensionElementInsert( MeasureDimName, '', 'AttributeCubeName', 's' );
    DimensionElementInsert( MeasureDimName, '', 'Copy Dimension', 's' );
    DimensionElementInsert( MeasureDimName, '', 'Copy Data', 's' );
    AttrInsert(MeasureDimName, '', 'Picklist', 'S' );
Endif;



#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Create Cube if it doesn't already exist
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF(CubeExists( CubeName ) = 0);
    CubeCreate( CubeName, DimName, MeasureDimName );
Endif;

#endregion
#region Metadata
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# For all dimensions with attributes, add them to the dimension if they don't already exist
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
AttrDimName = '}ElementAttributes_' | vDimension;

IF(DimensionElementExists( '}Dimensions', AttrDimName ) = 1);
    IF(DimensionElementExists( DimName, vDimension )=0);
        DimensionElementInsert( DimName, '', vDimension, 's' );
    Endif;
Endif;


#endregion
#region Data
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# For all dimensions with attributes, update the cube values
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
AttrDimName = '}ElementAttributes_' | vDimension;
AttrCubeName = '}ElementAttributes_' | vDimension;

IF(DimensionElementExists( DimName, vDimension )=1);
 
    # Populate the attribute dimension and attribute cube name
    CellPutS(AttrDimName,CubeName ,vDimension,'AttributeDimName');
    CellPutS(AttrCubeName,CubeName ,vDimension,'AttributeCubeName');

    # If the 'Copy Dimension' attribute is blank, i.e. it's new, set as 'y' so that new attribute dimensions are copied by default
     IF(CellGetS(CubeName ,vDimension,'Copy Dimension')@='');
        CellPutS('y',CubeName ,vDimension,'Copy Dimension');
    Endif;
    
    # If the 'Copy Data' attribute is blank, i.e. it's new, set as 'n' so that attribute values are NOT copied by default
     IF(CellGetS(CubeName ,vDimension,'Copy Data')@='');
        CellPutS('n',CubeName ,vDimension,'Copy Data');
    Endif;

Endif;





#endregion
#region Epilog
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Create picklists
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
AttrPutS( 'static:y:n', MeasureDimName, 'Copy Dimension', 'Picklist' );
AttrPutS( 'static:y:n', MeasureDimName, 'Copy Data', 'Picklist' );

#endregion