#region Prolog
# Imports leaf level data from CSV
# Programmed for up to 9 dimensions


#Region ####### PUT IN PROLOGUE OF PROCESS TO LOG: #######
pPrologNow = Now; 
# Catch errors with if statement and do nErrors = nErrors+1;
nErrors = 0;   
# Redefine message depending on if statement that handled the exception to help user
pMessage = 'Process Completed Successfully';    
sMessage1 = '';
sMessage2 = '';
sMessage3 = '';
# Concatenate the parameters together to write into output cube. pParam1 | ', ' | pParam2 | ', ' | pParam3 | ....
pParameters ='pCube: '|pCube|', pYear: '|pYear|', pVersion: '|pVersion; 
#EndRegion


# If the version doesn't exist, add it in
IF(Dimix('Version', pVersion)=0);
  DimensionElementInsertDirect( 'Version', '', pVersion, 'N' );
  DimensionElementComponentAdd( 'Version', 'Static Versions', pVersion, 1 );
  ExecuteProcess( 'ADMIN - Logging - Admin - Dimension Changes Log', 'pProcess', GetProcessName(), 'pDimension', 'Version', 'pElement', pVersion);
Endif;


sView = GetProcessName|pCube;
sSubset = GetProcessName|pCube;
nTemp = 1;

# nCubeLogging = CubeGetLogChanges( pCube );
# CubeSetLogChanges( pCube, 0 );

# Create Target view and clear data

ViewDestroy( pCube, sView );
ViewCreate( pCube, sView, nTemp );

nDim=CubeDimensionCountGet( pCube );
iDim = 1;
While (iDim <= nDim);
  sDim = TABDIM( pCube, iDim );
  IF(SubsetExists( sDim, sSubset )<>0);
      SubsetDestroy( sDim, sSubset );
  Endif;
  SubsetCreate( sDim, sSubset, nTemp );
  SubsetMDXSet( sDim, sSubset, 'TM1Filterbylevel(TM1SubsetAll(['| sDim |']),0)' );
  SubsetMDXSet( sDim, sSubset, '' );
  ViewSubsetAssign( pCube, sView, sDim, sSubset );
iDim = iDim+1;
End;

IF(pYear@<>'');
    sDim = 'Period';
    SubsetDeleteAllElements( sDim, sSubset );
    SubsetMDXSet( sDim, sSubset, 'TM1FILTERBYLEVEL(TM1DRILLDOWNMEMBER({[Period].[' | pYear | ']} , all , recursive) , 0)' );
    SubsetMDXSet( sDim, sSubset, '' );
Endif;

IF(pVersion@<>'');
    sDim = 'Version';
    SubsetDeleteAllElements( sDim, sSubset );
    SubsetMDXSet( sDim, sSubset, '{[' | sDim | '].[' | pVersion | ']}' );
    SubsetMDXSet( sDim, sSubset, '' );
Endif;

ViewZeroOut( pCube, sView );

# Define source file

sFileLocation = GetProcessErrorFileDirectory;
sFileLocation = Subst(sFileLocation, 1, LONG( sFileLocation )-5)|'Data\Model_Upload';

sFileName = pCube | ' Extract.csv';

DatasourceType = 'CHARACTERDELIMITED';
DatasourceNameForClient = sFileLocation |'\'| sFileName;
DatasourceNameForServer = sFileLocation |'\'| sFileName;
DatasourceASCIIHeaderRecords = 1;
#endregion
#region Data
#Region  Data
IF(pVersion@<>'');
IF(TABDIM( pCube, 1)@='Version');
  v1=pVersion;
ElseIf(TABDIM( pCube, 2)@='Version');
  v2=pVersion;
ElseIf(TABDIM( pCube, 3)@='Version');
  v3=pVersion;
ElseIf(TABDIM( pCube, 4)@='Version');
  v4=pVersion;
ElseIf(TABDIM( pCube, 5)@='Version');
  v5=pVersion;
ElseIf(TABDIM( pCube, 6)@='Version');
  v6=pVersion;
ElseIf(TABDIM( pCube, 7)@='Version');
  v7=pVersion;
# ElseIf(TABDIM( pCube, 8)@='Version');
#   v8=pVersion;  
# ElseIf(TABDIM( pCube, 9)@='Version');
#   v9=pVersion;  
Else;
  ProcessError;
Endif;
Endif;

IF(pYear@<>'');
IF(TABDIM( pCube, 1)@='Period');
  v1=Subst(v1, 1, 4)|pYear;
ElseIf(TABDIM( pCube, 2)@='Period');
  v2=Subst(v2, 1, 4)|pYear;
ElseIf(TABDIM( pCube, 3)@='Period');
  v3=Subst(v3, 1, 4)|pYear;
ElseIf(TABDIM( pCube, 4)@='Period');
  v4=Subst(v4, 1, 4)|pYear;
ElseIf(TABDIM( pCube, 5)@='Period');
  v5=Subst(v5, 1, 4)|pYear;
ElseIf(TABDIM( pCube, 6)@='Period');
  v6=Subst(v6, 1, 4)|pYear;
ElseIf(TABDIM( pCube, 7)@='Period');
  v7=Subst(v7, 1, 4)|pYear;
# ElseIf(TABDIM( pCube, 8)@='Period');
#   v8=Subst(v8, 1, 4)|pYear;
# ElseIf(TABDIM( pCube, 9)@='Period');
#   v9=Subst(v9, 1, 4)|pYear;
Else;
  ProcessError;
Endif;
Endif;

IF(nDim = 2);
  #  IF(CellIsUpdateable(  pCube, v1, v2 )<>0);
        If(ElementType( TabDim(pCube, 2), TabDim(pCube, 2), v2 )@='S');
            CellPutS(( v3 ), pCube, v1, v2 );
        Else;
            CellPutN(StringToNumber( v3 ), pCube, v1, v2 );
        Endif;
  #  Endif;
  
ElseIf(nDim = 3);
  #  IF(CellIsUpdateable(  pCube, v1, v2, v3 )<>0);
        If(ElementType( TabDim(pCube, 3), TabDim(pCube, 3), v3 )@='S');
            CellPutS(( v4 ), pCube, v1, v2, v3 );
        Else;
            CellPutN(StringToNumber( v4 ), pCube, v1, v2, v3 );
        Endif;
   # Endif; 
  
ElseIf(nDim = 4);
  #  IF(CellIsUpdateable(  pCube, v1, v2, v3, v4 )<>0);
        If(ElementType( TabDim(pCube, 4), TabDim(pCube, 4), v4 )@='S');
            CellPutS(( v5 ), pCube, v1, v2, v3, v4 );
        Else;
            CellPutN(StringToNumber( v5 ), pCube, v1, v2, v3, v4 );
        Endif;
 #   Endif;
    
ElseIf(nDim = 5);
  #  IF(CellIsUpdateable(  pCube, v1, v2, v3, v4, v5 )<>0);
        If(ElementType( TabDim(pCube, 5), TabDim(pCube, 5), v5 )@='S');
            CellPutS(( v6 ), pCube, v1, v2, v3, v4, v5 );
        Else;
            CellPutN(StringToNumber( v6 ), pCube, v1, v2, v3, v4, v5 );
        Endif;
  #  Endif;

ElseIf(nDim = 6);
  #  IF(CellIsUpdateable(  pCube, v1, v2, v3, v4, v5, v6 )<>0);
        If(ElementType( TabDim(pCube, 6), TabDim(pCube, 6), v6 )@='S');
            CellPutS(( v7 ), pCube, v1, v2, v3, v4, v5, v6 );
        Else;
            CellPutN(StringToNumber( v7 ), pCube, v1, v2, v3, v4, v5, v6 );
        Endif;
 #   Endif;
    
ElseIf(nDim = 7);
 #   IF(CellIsUpdateable(  pCube, v1, v2, v3, v4, v5, v6, v7 )<>0);
        If(ElementType( TabDim(pCube, 7), TabDim(pCube, 7), v7 )@='S');
            CellPutS(( v8 ), pCube, v1, v2, v3, v4, v5, v6, v7 );
        Else;
            CellPutN(StringToNumber( v8 ), pCube, v1, v2, v3, v4, v5, v6, v7 );
        Endif;
  #  Endif;
    
# ElseIf(nDim = 8);
#   If(ElementType( TabDim(pCube, 8), TabDim(pCube, 8), v8 )@='S');
#     CellPutS(( v9 ), pCube, v1, v2, v3, v4, v5, v6, v7, v8 );
#   Else;
#     CellPutN(StringToNumber( v9 ), pCube, v1, v2, v3, v4, v5, v6, v7, v8);
#   Endif;
  
# ElseIf(nDim = 9);
#   If(ElementType( TabDim(pCube, 9), TabDim(pCube, 9), v9 )@='S');
#     CellPutS(( v10 ), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9 );
#   Else;
#     CellPutN(StringToNumber( v10 ), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9 );
#   Endif;
  
Else; 
# More than 9 dimensions
ProcessError;
Endif;


#endregion
#region Epilog
# CubeSetLogChanges( pCube, nCubeLogging );

#Region ####### PUT IN EPILOGUE OF PROCESS TO LOG: ##############
# Put messages here to explain exceptions to user
if(nErrors>0);
    pMessage = sMessage1 |sMessage2 | sMessage3 ;   
endif;
ExecuteProcess('SYS Process Logging', 'pProcessName',GetProcessName(), 'pUser', tm1user, 'pPrologNow', pPrologNow, 'pErrors', nErrors, 'pMessage', pMessage, 'pParameters', pParameters);
####### pMessage and nErrors must be defined in the process to log with exeption handling.
#EndRegion

#endregion