#region Prolog
#-------------------------------------------------------------------------------------------------------------------------------------------------------------
# Define environment variables
#-------------------------------------------------------------------------------------------------------------------------------------------------------------
# Global settings for the client 
host = CellGetS( 'BSL_APIPROM Credentials', 'Input', 'host' );
apiKey =  CellGetS( 'BSL_APIPROM Credentials', 'Input', 'apiKey' );

# Convert apiKey to base 64 encoding
apiKey = Base64Encode( 'apikey:'| apiKey);

# Tenant ID's for the instances that exist
DevTenant =CellGetS( 'BSL_APIPROM Credentials', 'Input', 'DevTenant' );
ProdTenant = CellGetS( 'BSL_APIPROM Credentials', 'Input', 'ProdTenant' );

# Select which tenant to use for the source
If(pSourceInstance @= 'Dev');
    SourceTenant = DevTenant;
elseif( pSourceInstance @= 'Prod' );
    SourceTenant = ProdTenant;
endif;

# Select which tenant to use for the destination
If(pDestInstance @= 'Dev');
    DestinationTenant = DevTenant;
elseif( pDestInstance @= 'Prod' );
    DestinationTenant = ProdTenant;
endif;

# Set databases to copy from and to
SourceDB = pSourceDB;
DestinationDB = pDestDB;

# Define the root URL for the source and destination for the API calls
SourceRoot = host |'/api/' |SourceTenant | '/v0/tm1/' |SourceDB|'/api/v1/'; 
DestinationRoot = host | '/api/' | DestinationTenant | '/v0/tm1/' | DestinationDB | '/api/v1/';


#-------------------------------------------------------------------------------------------------------------------------------------------------------------
# GET DATA FROM SOURCE DB
#-------------------------------------------------------------------------------------------------------------------------------------------------------------
# Request a session cookie that means further requests don't need authentication token
SourceHeader = '-h Authorization: Basic ' | apiKey;
ExecuteHttpRequest('GET', host | '/api/' | SourceTenant | '/v0/rolemgmt/v1/users/me', SourceHeader);

# Check the response and end the process if authentication failed
responseBody = HttpResponseGetBody();
status = HttpResponseGetStatusCode();
If(status <> 200);
    ItemReject('Error authenticating to source environment: ' | responseBody);
EndIf;


# Get dimension attributes data from source database
url = SourceRoot |'Dimensions('''|pDimName|''')/Hierarchies('''|pDimName|''')/ElementAttributes';
ExecuteHttpRequest('GET', url, Sourceheader);
AttributesData = HttpResponseGetBody();
AttributesData = jsonget(AttributesData,'value');
status = HttpResponseGetStatusCode();
If(status > 299);
    ItemReject('Error retrieving dimension metadata: ' | AttributesData);
EndIf;


#-------------------------------------------------------------------------------------------------------------------------------------------------------------
# POST DATA TO TARGET DB
#-------------------------------------------------------------------------------------------------------------------------------------------------------------
# Request a session cookie that means further requests don't need authentication token
# This isn't needed if the source and target databases are on the same instance, but when copy from one instance to another it is, so just do it anyway.
DestinationHeader = '-h Authorization: Basic ' | apiKey;
ExecuteHttpRequest('GET', host | '/api/' | DestinationTenant | '/v0/rolemgmt/v1/users/me', DestinationHeader);

# Check the response and end the process if authentication failed
responseBody = HttpResponseGetBody();
status = HttpResponseGetStatusCode();
If(status <> 200);
    ItemReject('Error authenticating to destination environment: ' | responseBody);
EndIf;


# Define header
DataHeader = '-H Content-Type: application/json; charset=utf-8';

# Define endpoint
url = DestinationRoot |'Dimensions('''|pDimName|''')/Hierarchies('''|pDimName|''')/ElementAttributes';

# Element Attributes only supports POST not PATCH so loop through each element and POST individually. 
# Existing attributes will fail, and new attributes and attribute types will be created
elementcount = JsonSize( AttributesData );

i=0;
while (i< elementcount);
    ElementAttributeData = JsonGet( AttributesData, i);
    ExecuteHttpRequest('POST', url, DataHeader, '-d ' | ElementAttributeData );
    responsedimensionAttributes = HttpResponseGetBody();
    status = HttpResponseGetStatusCode();
    i=i+1;
end;


#endregion
#region Data


#endregion
#region Epilog



#endregion