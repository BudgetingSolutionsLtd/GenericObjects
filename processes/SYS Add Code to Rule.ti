#region Prolog
# UNFINISHED

#Region ####### PUT IN PROLOGUE OF PROCESS TO LOG: #######
pPrologNow = Now; 
# Catch errors with if statement and do nErrors = nErrors+1;
nErrors = 0;   
# Redefine message depending on if statement that handled the exception to help user
pMessage = 'Process completed successfully.';    
sMessage1 = '';
sMessage2 = '';
sMessage3 = '';
# Concatenate the parameters together to write into output cube. pParam1 | ', ' | pParam2 | ', ' | pParam3 | ....
pParameters = 'pSourceName: ' | pSourceName | ', pSourceInstance: ' | pSourceInstance | ', pSourceDB: ' | pSourceDB | ', pStartEnd: ' | pStartEnd | ', pLine1: ' | pLine1 | ', pLine2: ' | pLine2 | ', pLine3: ' | pLine3 | ', pLine4: ' | pLine4 | ', pLine5: ' | pLine5 | ', pLine6: ' | pLine6 | ', pLine7: ' | pLine7 | ', pLine8: ' | pLine8 | ', pLine9: ' | pLine9 | ', pLine10: ' | pLine10 | ', pLine11: ' | pLine11 | ', pLine12: ' | pLine12 | ', pLine13: ' | pLine13 | ', pLine14: ' | pLine14;
#EndRegion


# Check pSourceName for spaces and replace with %20
i=1;
while (i>0);
    i = SCAN(' ',pSourceName);
    if(i<>0);
        pSourceName = DELET(pSourceName,i,1);
        pSourceName = INSRT('%20',pSourceName,i);
    endif;
end;

#Check for } and encode as %7D
pFind = '}';
pReplace = '%7D';
FindLong = LONG( pFind );
FindScan = SCAN( pFind, pSourceName);
while(FindScan<>0);
    pSourceName = SUBST(pSourceName, 1, FindScan-1) | pReplace | SUBST( pSourceName, FindScan+FindLong, long(pSourceName));
    FindScan = SCAN( pFind, pSourceName );
end;

#-------------------------------------------------------------------------------------------------------------------------------------------------------------
# Define environment variables
#-------------------------------------------------------------------------------------------------------------------------------------------------------------
# Global settings for the client
host = CellGetS( 'SYS PA API Credentials', 'Input', 'host' );
apiKey =  CellGetS( 'SYS PA API Credentials', 'Input', 'apiKey' );

# Convert apiKey to base 64 encoding
apiKey = Base64Encode( 'apikey:'| apiKey);

# Tenant ID's for the instances that exist
DevTenant =CellGetS( 'SYS PA API Credentials', 'Input', 'DevTenant' );
ProdTenant = CellGetS( 'SYS PA API Credentials', 'Input', 'ProdTenant' );

# Select which tenant to use for the source
If(pSourceInstance @= 'Dev');
    SourceTenant = DevTenant;
elseif( pSourceInstance @= 'Prod' );
    SourceTenant = ProdTenant;
endif;

DestinationTenant = SourceTenant;
# Set databases to copy from and to
SourceDB = pSourceDB;
DestinationDB = pSourceDB;
pDestDB = pSourceDB;

# Define the root URL for the source and destination for the API calls
SourceRoot = host |'/api/' |SourceTenant | '/v0/tm1/' |SourceDB|'/api/v1/'; 
DestinationRoot = SourceRoot;


#-------------------------------------------------------------------------------------------------------------------------------------------------------------
# GET DATA FROM SOURCE DATABASE
#-------------------------------------------------------------------------------------------------------------------------------------------------------------
# Request a session cookie that means further requests don't need authentication token
SourceHeader = '-H Authorization: Basic ' | apiKey;
ExecuteHttpRequest('GET', host | '/api/' | SourceTenant | '/v0/rolemgmt/v1/users/me', SourceHeader);

# Check the response and end the process if authentication failed
ResponseBody = HttpResponseGetBody();
ResponseStatus = HttpResponseGetStatusCode();
If(ResponseStatus <> 200);
    ItemReject('Error authenticating to source environment: ' | ResponseBody);
EndIf;

NewLine = '\r\n';
sCode = pLine1 | NewLine | pLine2 | NewLine | pLine3 | NewLine | pLine4 | NewLine | pLine5 | NewLine | pLine6 | NewLine | pLine7 | NewLine | pLine8 | NewLine | pLine9 | NewLine | pLine10 | NewLine | pLine11 | NewLine | pLine12 | NewLine | pLine13 | NewLine | pLine14;

# if there's two new lines in a row, make it into 1 new line, so the process doesnt have to use 14 lines every time
pFind = NewLine | NewLine;

FindLong = LONG( pFind );
FindScan = SCAN( pFind, sCode);
while(FindScan<>0);
    Scode = SUBST( sCode, 1, FindScan-1) | NewLine | SUBST( sCode, FindScan+FindLong, long(sCode));
    FindScan = SCAN( pFind, sCode );
end;
    

#-------------------------------------------------------------------------------------------------------------------------------------------------------------
# GET DATA FROM SOURCE DATABASE
#-------------------------------------------------------------------------------------------------------------------------------------------------------------
# Request a session cookie that means further requests don't need authentication token
SourceHeader = '-H Authorization: Basic ' | apiKey;
ExecuteHttpRequest('GET', host | '/api/' | SourceTenant | '/v0/rolemgmt/v1/users/me', SourceHeader);

# Check the response and end the process if authentication failed
ResponseBody = HttpResponseGetBody();
ResponseStatus = HttpResponseGetStatusCode();
If(ResponseStatus <> 200);
    ItemReject('Error authenticating to source environment: ' | ResponseBody);
EndIf;

# Get Process data from source database
url = SourceRoot |'Cubes('''|pSourceName|''')/Rules';
ExecuteHttpRequest('GET', url, SourceHeader);

# Check the response and end the process if authentication failed
ResponseRule = HttpResponseGetBody();
ResponseStatus = HttpResponseGetStatusCode();
#If(ResponseStatus > 299);
    ItemReject('Error retrieving cube '|pSourceName|' in  '|pSourceDB|'  Error code: '|NumberToString( ResponseStatus)|' Response: ' | ResponseRule);
#EndIf;


#Region #~~~~~~~~~~Actual find and replace part ~~~~~~~~~~~#
#find and replace in prolog
rule = JsonGet( ResponseRule, 'value' );
if(pStartEnd@='Start');
#    rule = 
endif;
FindScan = SCAN( pFind, rule);
while(FindScan<>0);
#    rule = SUBST( rule, 1, FindScan-1) | pReplace | SUBST( rule, FindScan+FindLong, long(rule));
    FindScan = SCAN( pFind, rule );
end;
ResponseRule = JsonReplace( ResponseRule, 'value', rule );


#-------------------------------------------------------------------------------------------------------------------------------------------------------------
# UPDATE THE DESTINATION DATABASE
#-------------------------------------------------------------------------------------------------------------------------------------------------------------
# Request a session cookie that means further requests don't need authentication token 
# This isn't needed if the source and target databases are on the same instance, but when copy from one instance to another it is, so just do it anyway.
DestinationAuthHeader = '-H Authorization: Basic ' | apiKey;
ExecuteHttpRequest('GET', host | '/api/' | DestinationTenant | '/v0/rolemgmt/v1/users/me', DestinationAuthHeader);

# Check the response and end the process if authentication failed
ResponseBody = HttpResponseGetBody();
ResponseStatus = HttpResponseGetStatusCode();
If(ResponseStatus <> 200);
    ItemReject('Error authenticating to destination environment: ' | ResponseBody);
EndIf;

# Define header
DestinationHeader = '-H Content-Type: application/json; charset=utf-8';

# Define endpoint
pDestinationName = pSourceName;
url = DestinationRoot |'Cubes('''|pDestinationName|''')';

# Prepare data
DestinationData = JsonAdd( '{}', 'Rules', rule );

url = DestinationRoot |'Cubes('''|pDestinationName|''')';
ExecuteHttpRequest('GET', url, DestinationAuthHeader);
ResponseStatus = HttpResponseGetStatusCode();
ResponseBody = HttpResponseGetBody();

DestinationData = JsonRemove( DestinationData, 'Attributes' );

url = DestinationRoot |'Cubes('''|pDestinationName|''')';
ExecuteHttpRequest('PATCH', url, DestinationAuthHeader, DestinationHeader,  '-d ' | DestinationData );

ResponseBody = HttpResponseGetBody();
ResponseStatus = HttpResponseGetStatusCode();
If(ResponseStatus <> 200);
    ItemReject('Error updating process '|pDestinationName|' in  '|pDestDB|'  Error code: '|NumberToString( ResponseStatus)|' Response: ' | ResponseBody);
EndIf;



#endregion
#region Data


#endregion
#region Epilog

#Region PROCESS LOGGING
# Put messages here to explain exceptions to user
if(nErrors>0);
    pMessage = sMessage1 |sMessage2 | sMessage3 ;   
endif;
RunProcess('SYS Process Logging', 'pProcessName',GetProcessName(), 'pUser', tm1user, 'pPrologNow', pPrologNow, 'pErrors', nErrors, 'pMessage', pMessage, 'pParameters', pParameters);
####### pMessage and nErrors must be defined in the process to log with exeption handling.
#EndRegion


#endregion