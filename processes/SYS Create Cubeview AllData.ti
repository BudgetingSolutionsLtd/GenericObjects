#region Prolog
#Region PROCESS LOGGING
## PUT IN PROLOG OF PROCESS TO LOG ##
pPrologNow = Now;
# Catch errors with if statement and do nErrors = nErrors+1;
nErrors = 0;
# Redefine messages depending on exception handling
pMessage = 'Process completed successfully. ';
sMessage1 = ''; sMessage2 = ''; sMessage3 = ''; sMessage4 = ''; sMessage5 = '';
# Concatenate the parameters together to write into output cube. 'pParam1: ' | pParam1 |',  'pParam2: ' | pParam2 | ', | 'pParam3: ' |  pParam3 | ....
pParameters = 'pCubeName: ' | pCubeName;
pReturnString = '';
pReturnNumber = 0;
#EndRegion PROCESS LOGGING

# Process to create an MDX view of a cube with all data

#############################################################################################################################
# CHANGE LOG
# 17/02/2025 | Helen Heaton | Process created
#############################################################################################################################

#Region PROCESS LOGGING
pPrologNow = Now; 
# Catch errors with if statement and do nErrors = nErrors+1;
nErrors = 0;   
# Redefine message depending on if statement that handled the exception to help user
pMessage = 'Process completed successfully';    
sMessage1 = '';
sMessage2 = '';
sMessage3 = '';
# Concatenate the parameters together to write into output cube. pParam1 | ', ' | pParam2 | ', ' | pParam3 | ....
pParameters ='pCubeName: '|pCubeName; 
#EndRegion




# Process variables
sViewName = 'AllData';

# Delete view if it already exists
if(ViewExists( pCubeName, sViewName ) = 1);
    ViewDestroy( pCubeName, sViewName );
endif;

# Get number of dimensions on cube
nDims = CubeDimensionCountGet( pCubeName );


#-----------------------------------------------------------------------------------------------------------------
# create mdx
#-----------------------------------------------------------------------------------------------------------------
i = 1;

# Create start of mdx
sDim = TABDIM( pCubeName, i );

    # check if Leaves hierarchy exists - if so use it, if not, use main hierarchy
    if (HierarchyExists( sDim, 'Leaves' )=1);
        sHier='Leaves';
        else;
        sHier=sDim;
    endif;

    mdx = 'SELECT NON EMPTY{{TM1FILTERBYLEVEL(TM1SUBSETALL(['|sDim|'].['|sHier|']) , 0)}} ON 0,NON EMPTY';
    i=2;

# Loop through remaining dimensions
while( i <= nDims);
    sDim = TABDIM( pCubeName, i );

        # check if Leaves hierarchy exists - if so use it, if not, use main hierarchy
        if (HierarchyExists( sDim, 'Leaves' )=1);
        sHier='Leaves';
        else;
        sHier=sDim;
    endif;
    
    mdx = mdx | ' {{ TM1FILTERBYLEVEL(TM1SUBSETALL(['|sDim|'].['|sHier|']) , 0)}}';
    if (i < nDims);
        mdx = mdx | '*';
    endif;
i=i+1;
end;

# Add end of mdx
mdx = mdx | 'ON 1 FROM  [' |pCubeName | ']';

ViewCreateByMDX( pCubeName, sViewName,mdx, 0 );
#endregion
#region Epilog
#
#Region PROCESS LOGGING
## PUT IN EPILOG OF PROCESS TO LOG ##
# Put messages here to explain exceptions to user;
if(nErrors>0);
    pMessage = sMessage1 | ', ' | sMessage2 | ', ' | sMessage3 | ', ' | sMessage4 | ', ' | sMessage5;
endif;
# pMessage and nErrors must be defined in the process to log with exception handling.
RunProcess('SYS Process Logging', 'pProcessName',GetProcessName(), 'pUser', tm1user, 'pPrologNow', pPrologNow, 'pErrors', nErrors, 'pMessage', pMessage, 'pParameters', pParameters, 'pReturnString', pReturnString, 'pReturnNumber', pReturnNumber);
#EndRegion PROCESS LOGGING

#endregion