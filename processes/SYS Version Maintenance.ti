#region Prolog

#Region ####### PUT IN PROLOGUE OF PROCESS TO LOG: #######
pPrologNow = Now; 
# Catch errors with if statement and do nErrors = nErrors+1;
nErrors = 0;   
# Redefine message depending on if statement that handled the exception to help user
pMessage = 'Process Completed Successfully';    
sMessage1 = '';
sMessage2 = '';
sMessage3 = '';
# Concatenate the parameters together to write into output cube. pParam1 | ', ' | pParam2 | ', ' | pParam3 | ....
pParameters ='pMode: '|pMode|', pSrcElement: '|pSrcElement|', pElement: '|pElement; 
#EndRegion


  IF( pMode = 2 % pMode = 3 % pMode = 4 % pMode = 6);
    IF( DIMIX('Version', pElement)=0);
      ItemReject('Element ' | pElement | ' does not exist in ' | 'Version' | ', please select an element that exists in this dimension');
      ProcessQuit;
    EndIF;
  EndIF;

  IF( pMode = 2 % pMode = 4);
    IF( ELISCOMP( 'Version', pElement, 'Live Versions' )=0);
      ItemReject('Element ' | pElement | ' is not a live version, please select the correct elements/parameters');
      ProcessQuit;
    EndIF;
  EndIF;

  IF( pMode = 5 );
    IF( ELISCOMP( 'Version', pSrcElement, 'Live Versions' )=0);
      ItemReject('Element ' | pSrcElement | ' is not a live version, please select the correct elements/parameters');
      ProcessQuit;
    EndIF;

    IF( ELISCOMP( 'Version', pElement, 'Live Versions' )>0);
        ItemReject(pElement | ' is a live version. You may not override a live version with mode 5');
    EndIF;
  EndIF;


  IF( pMode = 3);
    IF( ELISCOMP( 'Version', pElement, 'Static Versions' )=0);
      ItemReject('Element ' | pElement | ' is not a static version, please select the correct elements/parameters');
      ProcessQuit;
    EndIF;
  EndIF;
  
  IF( pMode = 1);
    IF( pSrcElement @<>'' & DIMIX('Version', pSrcElement)=0);
      ItemReject('Element Selected for Source ' | pSrcElement | ' does not exist in ' | 'Version');
      ProcessQuit;
    EndIF;
    IF( DIMIX('Version', pElement)>0);
      ItemReject('When mode 1 is selected the new element cannot already exist, attempted to replace ' | pElement | ' in ' | 'Version');
      ProcessQuit;
    EndIF;
  EndIF;
  
  
  IF( pMode = 4);
    IF( pElement @= pSrcElement);
      ItemReject('pElement and pSrcElement cannot be the same');
      ProcessQuit;
    EndIF;
    
    IF( DIMIX('Version', pSrcElement)=0);
      ItemReject('Element Selected for Source ' | pSrcElement | ' does not exist in ' | 'Version');
      ProcessQuit;   
    EndIF;
  EndIF;
# Mode 1

  IF( pMode = 1);
  
    DimensionElementInsertDirect( 'Version', '', pElement, 'N' );
    DimensionElementComponentAddDirect( 'Version', 'Live Versions', pElement, 1 );
    DimensionElementComponentAddDirect( 'Version', 'All Version', pElement, 1 );

  EndIF;
  
  IF( pMode = 5);
  
    DimensionElementInsertDirect( 'Version', '', pElement, 'N' );
    DimensionElementComponentAddDirect( 'Version', 'Static Versions', pElement, 1 );
    DimensionElementComponentAddDirect( 'Version', 'All Versions', pElement, 1 );
        
  EndIF;

    IF( pMode = 1 % pMode = 5 % pMode = 6);

  # Create Variance Elements

      iMax = DIMSIZ( 'Version' );
      i = 1;
      While ( i <= iMax);
        sVsElement = DIMNM( 'Version', i );
        IF(DTYPE( 'Version', sVsElement )@='N' & sVsElement @<> pElement);
          sVsElementConsol = pElement | ' v ' | sVsElement;
          sVsElementConsolP = pElement | ' v ' | sVsElement | ' %';
          sVarCat = pElement | ' Variances';
            
          DimensionElementInsertDirect( 'Version', '', sVsElementConsol, 'C' );
          DimensionElementInsertDirect( 'Version', '', sVsElementConsolP, 'C' );
          DimensionElementInsertDirect( 'Version', '', sVarCat, 'C' );
          DimensionElementComponentAddDirect( 'Version', sVsElementConsol, pElement, 1 );
          DimensionElementComponentAddDirect( 'Version', sVsElementConsol, sVsElement, -1 );
            
          DimensionElementComponentAddDirect( 'Version', sVsElementConsolP, pElement, 1 );
          DimensionElementComponentAddDirect( 'Version', sVsElementConsolP, sVsElement, -1 );
            
          DimensionElementComponentAddDirect( 'Version', sVarCat, sVsElementConsol, 0 );
          DimensionElementComponentAddDirect( 'Version', sVarCat, sVsElementConsolP, 0 );            
          DimensionElementComponentAddDirect( 'Version', 'Variances', sVarCat, 0 );    
            
          CellPutS( 'Y','}ElementAttributes_Version', sVsElementConsol, 'Variance');
          CellPutS( 'Y','}ElementAttributes_Version', sVsElementConsolP, 'Variance');
          CellPutS( 'Y','}ElementAttributes_Version', sVsElementConsolP, 'Pcnt Variance');  

          # Populate variances other way round...

          sVsElementConsol = sVsElement | ' v ' | pElement;
          sVsElementConsolP = sVsElement | ' v ' | pElement | ' %';
          sVarCat = sVsElement | ' Variances';
            
          DimensionElementInsertDirect( 'Version', '', sVsElementConsol, 'C' );
          DimensionElementInsertDirect( 'Version', '', sVsElementConsolP, 'C' );
          DimensionElementInsertDirect( 'Version', '', sVarCat, 'C' );
          DimensionElementComponentAddDirect( 'Version', sVsElementConsol, sVsElement, 1 );
          DimensionElementComponentAddDirect( 'Version', sVsElementConsol, pElement, -1 );
            
          DimensionElementComponentAddDirect( 'Version', sVsElementConsolP, sVsElement, 1 );
          DimensionElementComponentAddDirect( 'Version', sVsElementConsolP, pElement, -1 );
            
          DimensionElementComponentAddDirect( 'Version', sVarCat, sVsElementConsol, 0 );
          DimensionElementComponentAddDirect( 'Version', sVarCat, sVsElementConsolP, 0 );            
          DimensionElementComponentAddDirect( 'Version', 'Variances', sVarCat, 0 );    
            
          CellPutS( 'Y','}ElementAttributes_Version', sVsElementConsol, 'Variance');
          CellPutS( 'Y','}ElementAttributes_Version', sVsElementConsolP, 'Variance');
          CellPutS( 'Y','}ElementAttributes_Version', sVsElementConsolP, 'Pcnt Variance');              
            
        EndIF;
      i = i + 1;
      End;
    EndIF;
      
      
  IF(pMode = 1 % pMode = 4 % pMode = 5);
    
    # If a base version has been selected populate the new version with contents from the base version
    IF( pSrcElement @<>'');

    # For each cube with the version dimension perform the version copy.

          iCubeCount = DimSiz('}Cubes');
          i = 1;
          While( i <= iCubeCount);
            sCube = DIMNM( '}Cubes', i );

            # Ignore Control Cubes
            IF( SUBST( sCube, 1, 1 )@<>'}');

              nDimCount = CubeDimensionCountGet( sCube );
              n = 1;

             nContainsVersion = 0;
             nContainsPeriod = 0;                
                
              While(n<=nDimCount);
                sDim = TABDIM( sCube, n );
                # Process Version copy for cube if it contains the relevant version dimension 
                
                IF( sDim @= 'Version');
                    nContainsVersion = 1;
                EndIF;      
                IF( sDim @= 'Period');
                    nContainsPeriod = 1;
                EndIF;
              n = n + 1;
              End;    

              IF( nContainsVersion = 1);
                  IF( nContainsPeriod = 1);

                      IF( pSrcElement @= 'Dynamic Plan' & pElement @<> 'Live Plan');                      
                      LogOutput( 'INFO', Expand('SYS Version Copy Started | Cube: %sCube% pDim1: Version pDim1Src: %pSrcElement% pDim1Tgt: %pElement%'));                                                
                          ExecuteProcess( 'SYS Version Copy'
                            , 'pCube', sCube
                            , 'pTmp', 1
                            , 'pDim1', 'Version'
                            , 'pDim1Src', pSrcElement
                            , 'pDim1Tgt', pElement
                            );
                       LogOutput( 'INFO', Expand('SYS Version Copy Finished | Cube: %sCube% pDim1: Version pDim1Src: %pSrcElement% pDim1Tgt: %pElement%'));                                                    
                      Else;
                      LogOutput( 'INFO', Expand('SYS Version Copy Started | Cube: %sCube% pDim1: Version pDim1Src: %pSrcElement% pDim1Tgt: %pElement% pDimRestrict1: Period pDimRestrict1Element: Live Plan Periods'));                      
                          ExecuteProcess( 'SYS Version Copy'
                            , 'pCube', sCube
                            , 'pTmp', 1
                            , 'pDim1', 'Version'
                            , 'pDim1Src', pSrcElement
                            , 'pDim1Tgt', pElement
                            , 'pDimRestrict1', 'Period'
                            , 'pDimRestrict1Element', 'Live Plan Periods'
                            );
                       LogOutput( 'INFO', Expand('SYS Version Copy Finished | Cube: %sCube% pDim1: Version pDim1Src: %pSrcElement% pDim1Tgt: %pElement% pDimRestrict1: Period pDimRestrict1Element: Live Plan Periods'));                          
                      EndIF;

                  Else;
                      LogOutput( 'INFO', Expand('SYS Version Copy Started | Cube: %sCube% pDim1: Version pDim1Src: %pSrcElement% pDim1Tgt: %pElement%'));                      
                      ExecuteProcess( 'SYS Version Copy'
                        , 'pCube', sCube
                        , 'pTmp', 1
                        , 'pDim1', 'Version'
                        , 'pDim1Src', pSrcElement
                        , 'pDim1Tgt', pElement
                        );                      
                      LogOutput( 'INFO', Expand('SYS Version Copy Finished | Cube: %sCube% pDim1: Version pDim1Src: %pSrcElement% pDim1Tgt: %pElement%'));                                            
                  EndIF;                  
              EndIF;
            EndIF;
          i = i + 1;
          End;
    EndIF;
  EndIF;

# Modes 2 & 3

  IF( pMode = 2 % pMode = 3);

    iPar = ELPARN( 'Version', pElement );

    While(iPar > 0);
      sParent = ELPAR( 'Version', pElement, iPar );
      IF(ELISCOMP('Version', sParent, 'Variances')=1);
        DimensionElementDelete( 'Version', sParent );
      EndIF;
    iPar = iPar - 1;
    End;

    DimensionElementDelete( 'Version', pElement );
    
  EndIF;

SecurityRefresh;

#endregion
#region Epilog
#Region ####### PUT IN EPILOGUE OF PROCESS TO LOG: ##############
# Put messages here to explain exceptions to user
if(nErrors>0);
    pMessage = sMessage1 |sMessage2 | sMessage3 ;   
endif;
ExecuteProcess('SYS Process Logging', 'pProcessName',GetProcessName(), 'pUser', tm1user, 'pPrologNow', pPrologNow, 'pErrors', nErrors, 'pMessage', pMessage, 'pParameters', pParameters);
####### pMessage and nErrors must be defined in the process to log with exeption handling.
#EndRegion

#endregion