#region Prolog

# Set Variables

sProcess = GetProcessName;

sID_Src = sProcess | '_Src5';
sID_Tgt = sProcess | '_Tgt5';

# Validations
 
  IF(CubeExists( pCube )=0); ItemReject('pCube ' | pCube | ' is not a cube'); ProcessQuit; EndIF;
  IF(pTmp<>1 & pTmp<>0); ItemReject('pTmp must be 1 or 0'); ProcessQuit; EndIF;


# Destroy Views and Subsets

#  ExecuteProcess( 'SYS Create and Destroy Views and Subsets', 'pID', sID_Src, 'pCube', pCube, 'pTmp', pTmp, 'pCreateDestroy', 0);
#  ExecuteProcess( 'SYS Create and Destroy Views and Subsets', 'pID', sID_Tgt, 'pCube', pCube, 'pTmp', pTmp, 'pCreateDestroy', 0);

# Turn off logging

   nCubeLogging = CUBEGETLOGCHANGES(pCube);
  
  IF( nCubeLogging = 1);
    CellPutS('NO', '}CubeProperties', pCube, 'Logging' );
  EndIF;

# Create Source

  ExecuteProcess( 'SYS Create and Destroy Views and Subsets', 'pID', sID_Src, 'pCube', pCube, 'pTmp', pTmp, 'pCreateDestroy', 1);

  # Assign Source Elements
    SubsetDeleteAllElements( pDim1, sID_Src );
    SubsetElementInsert( pDim1, sID_Src, pDim1Src, 1 );

    IF( pDimRestrict1Element @<> '');
      SubsetDeleteAllElements( pDimRestrict1, sID_Src );
      sMDX = '{TM1FilterByLevel({TM1DrillDownMember({[' | pDimRestrict1 | '].['|pDimRestrict1Element|']}, All, Recursive)},0)}';
      SubsetMDXSet( pDimRestrict1, sID_Src, sMDX);
      SubsetMDXSet( pDimRestrict1, sID_Src, '');
    EndIF;
    
    IF( pDimRestrict2Element @<> '');
      SubsetDeleteAllElements( pDimRestrict2, sID_Src );
      sMDX = '{TM1FilterByLevel({TM1DrillDownMember({[' | pDimRestrict2 | '].['|pDimRestrict2Element|']}, All, Recursive)},0)}';
      SubsetMDXSet( pDimRestrict2, sID_Src, sMDX);
      SubsetMDXSet( pDimRestrict2, sID_Src, '');
    EndIF;    

    IF( pDimRestrict3Element @<> '');
      SubsetDeleteAllElements( pDimRestrict3, sID_Src );
      sMDX = '{TM1FilterByLevel({TM1DrillDownMember({[' | pDimRestrict3 | '].['|pDimRestrict3Element|']}, All, Recursive)},0)}';
      SubsetMDXSet( pDimRestrict3, sID_Src, sMDX);
      SubsetMDXSet( pDimRestrict3, sID_Src, '');
    EndIF;    

    IF( pDimRestrict4Element @<> '');
      SubsetDeleteAllElements( pDimRestrict4, sID_Src );
      sMDX = '{TM1FilterByLevel({TM1DrillDownMember({[' | pDimRestrict4 | '].['|pDimRestrict4Element|']}, All, Recursive)},0)}';
      SubsetMDXSet( pDimRestrict4, sID_Src, sMDX);
      SubsetMDXSet( pDimRestrict4, sID_Src, '');
    EndIF;    

    IF( pDimRestrict5Element @<> '');
      SubsetDeleteAllElements( pDimRestrict5, sID_Src );
      sMDX = '{TM1FilterByLevel({TM1DrillDownMember({[' | pDimRestrict5 | '].['|pDimRestrict5Element|']}, All, Recursive)},0)}';
      SubsetMDXSet( pDimRestrict5, sID_Src, sMDX);
      SubsetMDXSet( pDimRestrict5, sID_Src, '');
    EndIF;    

    IF( pDimRestrict6Element @<> '');
      SubsetDeleteAllElements( pDimRestrict6, sID_Src );
      sMDX = '{TM1FilterByLevel({TM1DrillDownMember({[' | pDimRestrict6 | '].['|pDimRestrict6Element|']}, All, Recursive)},0)}';
      SubsetMDXSet( pDimRestrict6, sID_Src, sMDX);
      SubsetMDXSet( pDimRestrict6, sID_Src, '');
    EndIF;    

    IF( pDimRestrict7Element @<> '');
      SubsetDeleteAllElements( pDimRestrict7, sID_Src );
      sMDX = '{TM1FilterByLevel({TM1DrillDownMember({[' | pDimRestrict7 | '].['|pDimRestrict7Element|']}, All, Recursive)},0)}';
      SubsetMDXSet( pDimRestrict7, sID_Src, sMDX);
      SubsetMDXSet( pDimRestrict7, sID_Src, '');
    EndIF;    

    IF( pDimRestrict8Element @<> '');
      SubsetDeleteAllElements( pDimRestrict8, sID_Src );
      sMDX = '{TM1FilterByLevel({TM1DrillDownMember({[' | pDimRestrict8 | '].['|pDimRestrict8Element|']}, All, Recursive)},0)}';
      SubsetMDXSet( pDimRestrict8, sID_Src, sMDX);
      SubsetMDXSet( pDimRestrict8, sID_Src, '');
    EndIF;    

  # Set View & DataSource properties

    ViewExtractSkipCalcsSet (pCube, sID_Src, 1);
    ViewExtractSkipRuleValuesSet (pCube, sID_Src, 0);
    ViewExtractSkipZeroesSet (pCube, sID_Src, 1);

    DatasourceNameForServer = pCube;
    DataSourceType = 'VIEW';
    DataSourceCubeView = sID_Src;

# Create Target to Clear

  ExecuteProcess( 'SYS Create and Destroy Views and Subsets', 'pID', sID_Tgt, 'pCube', pCube, 'pTmp', pTmp, 'pCreateDestroy', 1);

  # Assign Target Elements
    SubsetDeleteAllElements( pDim1, sID_Tgt );
    SubsetElementInsert( pDim1, sID_Tgt, pDim1Tgt, 1 );

    IF( pDimRestrict1Element @<> '');
      SubsetDeleteAllElements( pDimRestrict1, sID_Tgt );
      sMDX = '{TM1FilterByLevel({TM1DrillDownMember({[' | pDimRestrict1 | '].['|pDimRestrict1Element|']}, All, Recursive)},0)}';
      SubsetMDXSet( pDimRestrict1, sID_Tgt, sMDX);
      SubsetMDXSet( pDimRestrict1, sID_Tgt, '');
    EndIF;
    
    IF( pDimRestrict2Element @<> '');
      SubsetDeleteAllElements( pDimRestrict2, sID_Tgt );
      sMDX = '{TM1FilterByLevel({TM1DrillDownMember({[' | pDimRestrict2 | '].['|pDimRestrict2Element|']}, All, Recursive)},0)}';
      SubsetMDXSet( pDimRestrict2, sID_Tgt, sMDX);
      SubsetMDXSet( pDimRestrict2, sID_Tgt, '');
    EndIF;    

    IF( pDimRestrict3Element @<> '');
      SubsetDeleteAllElements( pDimRestrict3, sID_Tgt );
      sMDX = '{TM1FilterByLevel({TM1DrillDownMember({[' | pDimRestrict3 | '].['|pDimRestrict3Element|']}, All, Recursive)},0)}';
      SubsetMDXSet( pDimRestrict3, sID_Tgt, sMDX);
      SubsetMDXSet( pDimRestrict3, sID_Tgt, '');
    EndIF;    

    IF( pDimRestrict4Element @<> '');
      SubsetDeleteAllElements( pDimRestrict4, sID_Tgt );
      sMDX = '{TM1FilterByLevel({TM1DrillDownMember({[' | pDimRestrict4 | '].['|pDimRestrict4Element|']}, All, Recursive)},0)}';
      SubsetMDXSet( pDimRestrict4, sID_Tgt, sMDX);
      SubsetMDXSet( pDimRestrict4, sID_Tgt, '');
    EndIF;    

    IF( pDimRestrict5Element @<> '');
      SubsetDeleteAllElements( pDimRestrict5, sID_Tgt );
      sMDX = '{TM1FilterByLevel({TM1DrillDownMember({[' | pDimRestrict5 | '].['|pDimRestrict5Element|']}, All, Recursive)},0)}';
      SubsetMDXSet( pDimRestrict5, sID_Tgt, sMDX);
      SubsetMDXSet( pDimRestrict5, sID_Tgt, '');
    EndIF;    

    IF( pDimRestrict6Element @<> '');
      SubsetDeleteAllElements( pDimRestrict6, sID_Tgt );
      sMDX = '{TM1FilterByLevel({TM1DrillDownMember({[' | pDimRestrict6 | '].['|pDimRestrict6Element|']}, All, Recursive)},0)}';
      SubsetMDXSet( pDimRestrict6, sID_Tgt, sMDX);
      SubsetMDXSet( pDimRestrict6, sID_Tgt, '');
    EndIF;    

    IF( pDimRestrict7Element @<> '');
      SubsetDeleteAllElements( pDimRestrict7, sID_Tgt );
      sMDX = '{TM1FilterByLevel({TM1DrillDownMember({[' | pDimRestrict7 | '].['|pDimRestrict7Element|']}, All, Recursive)},0)}';
      SubsetMDXSet( pDimRestrict7, sID_Tgt, sMDX);
      SubsetMDXSet( pDimRestrict7, sID_Tgt, '');
    EndIF;    

    IF( pDimRestrict8Element @<> '');
      SubsetDeleteAllElements( pDimRestrict8, sID_Tgt );
      sMDX = '{TM1FilterByLevel({TM1DrillDownMember({[' | pDimRestrict8 | '].['|pDimRestrict8Element|']}, All, Recursive)},0)}';
      SubsetMDXSet( pDimRestrict8, sID_Tgt, sMDX);
      SubsetMDXSet( pDimRestrict8, sID_Tgt, '');
    EndIF;    


  # Set View properties

    ViewExtractSkipCalcsSet (pCube, sID_Tgt, 1);
    ViewExtractSkipRuleValuesSet (pCube, sID_Tgt, 0);
    ViewExtractSkipZeroesSet (pCube, sID_Tgt, 1);

  # Clear Target
    ViewZeroOut(pCube, sID_Tgt);
    
 nCubeDimCount = CubeDimensionCountGet( pCube );
# sDimMeas = TABDIM(pCube, nCubeDimCount);
i = 1;

nDim1Index = 0; nDim2Index = 0; nDim3Index = 0;

 While( i <= nCubeDimCount);
   sDim = TABDIM( pCube, i );
   IF( sDim @= pDim1); nDim1Index = i; EndIF;
   IF( sDim @= pDim2); nDim2Index = i; EndIF;     
 i = i + 1;
 End;  

#endregion
#region Data

# Assign target elements

  IF( nDim1Index>0);
    IF( nDim1Index =1); v1 = pDim1Tgt;
      ELSEIF( nDim1Index =2); v2 = pDim1Tgt;
      ELSEIF( nDim1Index =3); v3 = pDim1Tgt;
      ELSEIF( nDim1Index =4); v4 = pDim1Tgt;
      ELSEIF( nDim1Index =5); v5 = pDim1Tgt;
      ELSEIF( nDim1Index =6); v6 = pDim1Tgt;
      ELSEIF( nDim1Index =7); v7 = pDim1Tgt;
      ELSEIF( nDim1Index =8); v8 = pDim1Tgt;
      ELSEIF( nDim1Index =9); v9 = pDim1Tgt;
      ELSEIF( nDim1Index =10); v10 = pDim1Tgt;
      ELSEIF( nDim1Index =11); v11 = pDim1Tgt;
      ELSEIF( nDim1Index =12); v12 = pDim1Tgt;
      ELSEIF( nDim1Index =13); v13 = pDim1Tgt;   
      ELSEIF( nDim1Index =14); v14 = pDim1Tgt;   
      ELSEIF( nDim1Index =15); v15 = pDim1Tgt;
      ELSEIF( nDim1Index =16); v16 = pDim1Tgt;         
    EndIF;
  EndIF;

  IF( nDim2Index>0);
    IF( nDim2Index =1); v1 = pDim2Tgt;
      ELSEIF( nDim2Index =2); v2 = pDim2Tgt;
      ELSEIF( nDim2Index =3); v3 = pDim2Tgt;
      ELSEIF( nDim2Index =4); v4 = pDim2Tgt;
      ELSEIF( nDim2Index =5); v5 = pDim2Tgt;
      ELSEIF( nDim2Index =6); v6 = pDim2Tgt;
      ELSEIF( nDim2Index =7); v7 = pDim2Tgt;
      ELSEIF( nDim2Index =8); v8 = pDim2Tgt;
      ELSEIF( nDim2Index =9); v9 = pDim2Tgt;
      ELSEIF( nDim2Index =10); v10 = pDim2Tgt;
      ELSEIF( nDim2Index =11); v11 = pDim2Tgt;
      ELSEIF( nDim2Index =12); v12 = pDim2Tgt;
      ELSEIF( nDim2Index =13); v13 = pDim2Tgt;   
      ELSEIF( nDim2Index =14); v14 = pDim2Tgt;   
      ELSEIF( nDim2Index =15); v15 = pDim2Tgt;
      ELSEIF( nDim2Index =16); v16 = pDim2Tgt;         
    EndIF;
  EndIF;


# Migrate Data if cell is updateable

  IF(Value_Is_String = 0);
        IF( nCubeDimCount = 2); IF(CellIsUpdateable( pCube, v1, v2 )=1); CellPutN(NValue, pCube, v1, v2); EndIF;
        ELSEIF( nCubeDimCount = 3); IF(CellIsUpdateable( pCube, v1, v2, v3 )=1); CellPutN(NValue, pCube, v1, v2, v3); EndIF;
        ELSEIF( nCubeDimCount = 4); IF(CellIsUpdateable( pCube, v1, v2, v3, v4 )=1); CellPutN(NValue, pCube, v1, v2, v3, v4); EndIF;
        ELSEIF( nCubeDimCount = 5); IF(CellIsUpdateable( pCube, v1, v2, v3, v4, v5 )=1); CellPutN(NValue, pCube, v1, v2, v3, v4, v5); EndIF;
        ELSEIF( nCubeDimCount = 6); IF(CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6 )=1); CellPutN(NValue, pCube, v1, v2, v3, v4, v5, v6);  EndIF;   
        ELSEIF( nCubeDimCount = 7); IF(CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7 )=1); CellPutN(NValue, pCube, v1, v2, v3, v4, v5, v6, v7); EndIF;     
        ELSEIF( nCubeDimCount = 8); IF(CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8 )=1); CellPutN(NValue, pCube, v1, v2, v3, v4, v5, v6, v7, v8); EndIF;      
        ELSEIF( nCubeDimCount = 9); IF(CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9 )=1); CellPutN(NValue, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9); EndIF;   
        ELSEIF( nCubeDimCount = 10); IF(CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10 )=1); CellPutN(NValue, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10); EndIF;      
        ELSEIF( nCubeDimCount = 11); IF(CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11 )=1); CellPutN(NValue, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11); EndIF;        
        ELSEIF( nCubeDimCount = 12); IF(CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12 )=1); CellPutN(NValue, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12); EndIF;   
        ELSEIF( nCubeDimCount = 13); IF(CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13 )=1); CellPutN(NValue, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13); EndIF;                 
        ELSEIF( nCubeDimCount = 14); IF(CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14 )=1); CellPutN(NValue, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14); EndIF;                 
        ELSEIF( nCubeDimCount = 15); IF(CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 )=1); CellPutN(NValue, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15); EndIF;                 
        ELSEIF( nCubeDimCount = 16); IF(CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16 )=1); CellPutN(NValue, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16); EndIF;                         
        EndIF;
  Else;            
        IF( nCubeDimCount = 2); IF(CellIsUpdateable( pCube, v1, v2 )=1); CellPutS(SValue, pCube, v1, v2); EndIF;
        ELSEIF( nCubeDimCount = 3); IF(CellIsUpdateable( pCube, v1, v2, v3 )=1); CellPutS(SValue, pCube, v1, v2, v3); EndIF;
        ELSEIF( nCubeDimCount = 4); IF(CellIsUpdateable( pCube, v1, v2, v3, v4 )=1); CellPutS(SValue, pCube, v1, v2, v3, v4); EndIF;
        ELSEIF( nCubeDimCount = 5); IF(CellIsUpdateable( pCube, v1, v2, v3, v4, v5 )=1); CellPutS(SValue, pCube, v1, v2, v3, v4, v5); EndIF;
        ELSEIF( nCubeDimCount = 6); IF(CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6 )=1); CellPutS(SValue, pCube, v1, v2, v3, v4, v5, v6); EndIF;
        ELSEIF( nCubeDimCount = 7); IF(CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7 )=1); CellPutS(SValue, pCube, v1, v2, v3, v4, v5, v6, v7); EndIF;        
        ELSEIF( nCubeDimCount = 8); IF(CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8 )=1); CellPutS(SValue, pCube, v1, v2, v3, v4, v5, v6, v7, v8); EndIF;
        ELSEIF( nCubeDimCount = 9); IF(CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9 )=1); CellPutS(SValue, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9); EndIF;   
        ELSEIF( nCubeDimCount = 10); IF(CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10 )=1); CellPutS(SValue, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10); EndIF; 
        ELSEIF( nCubeDimCount = 11); IF(CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11 )=1); CellPutS(SValue, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11); EndIF;           
        ELSEIF( nCubeDimCount = 12); IF(CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12 )=1); CellPutS(SValue, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12); EndIF;     
        ELSEIF( nCubeDimCount = 13); IF(CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13 )=1); CellPutS(SValue, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13); EndIF;                  
        ELSEIF( nCubeDimCount = 14); IF(CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14 )=1); CellPutS(SValue, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14); EndIF;                 
        ELSEIF( nCubeDimCount = 15); IF(CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 )=1); CellPutS(SValue, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15); EndIF;                 
        ELSEIF( nCubeDimCount = 16); IF(CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16 )=1); CellPutS(SValue, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16); EndIF;                                 
        EndIF;
  EndIF;

#endregion
#region Epilog

# Re-instate cube logging to previous state
  
  IF( nCubeLogging = 1);
    CellPutS('YES', '}CubeProperties', pCube, 'Logging' );
  EndIF;

# Destroy Views and Subsets
  ExecuteProcess( 'SYS Create and Destroy Views and Subsets', 'pID', sID_Src, 'pCube', pCube, 'pTmp', pTmp, 'pCreateDestroy', 0);
  ExecuteProcess( 'SYS Create and Destroy Views and Subsets', 'pID', sID_Tgt, 'pCube', pCube, 'pTmp', pTmp, 'pCreateDestroy', 0);


#endregion